# call lexima#add_rule({'char': '<TAB>', 'at': '\%#)', 'leave': 1})
# call lexima#add_rule({'char': '<TAB>', 'at': '\%#"', 'leave': 1})
# call lexima#add_rule({'char': '<TAB>', 'at': "\%#'", 'leave': 1})
# call lexima#add_rule({'char': '<TAB>', 'at': '\%#]', 'leave': 1})
# call lexima#add_rule({'char': '<TAB>', 'at': '\%#}', 'leave': 1})

# call lexima#add_rule({"at" : '\%#',   "char" : '"', "input_after" : '"'})
# call lexima#add_rule({"at" : '\%#',   "char" : '"', "input" : '"', "syntax" : "String"})
# call lexima#add_rule({"at" : '"\%#"', "char" : '"', "input" : '<Right>'})
# call lexima#add_rule({"at" : '"\%#"', "char" : '"', "input" : '<Right>', "syntax" : "String"})
#
# call lexima#add_rule({"at" : "\%#",   "char" : "'", "input_after" : "'"})
# call lexima#add_rule({"at" : "\%#",   "char" : "'", "input" : "'", "syntax" : "String"})
# call lexima#add_rule({"at" : "'\%#'", "char" : "'", "input" : '<Right>'})
# call lexima#add_rule({"at" : "'\%#'", "char" : "'", "input" : '<Right>', "syntax" : "String"})

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
hook_add = '''
let g:NERDTreeLimitedSyntax = 1
let g:NERDTreeSyntaxEnabledExtensions = [
  \ 'bmp',
  \ 'c',
  \ 'coffee',
  \ 'cpp',
  \ 'css',
  \ 'erb',
  \ 'go',
  \ 'hs',
  \ 'html',
  \ 'java',
  \ 'jpg',
  \ 'js',
  \ 'json',
  \ 'jsx',
  \ 'less',
  \ 'lua',
  \ 'markdown',
  \ 'md',
  \ 'php',
  \ 'png',
  \ 'pl',
  \ 'py',
  \ 'rb',
  \ 'rs',
  \ 'scala',
  \ 'scss',
  \ 'sh',
  \ 'sql',
  \ 'vim',
  \ 'vue',
\]
'''

###############
### Jupyter ###
###############

[[plugins]]
repo = 'szymonmaszke/vimpyter'
on_ft = ['ipynb']
hook_add = '''
autocmd Filetype ipynb nmap <silent><C-s>b :VimpyterInsertPythonBlock<CR>
autocmd Filetype ipynb nmap <silent><C-s>j :VimpyterStartJupyter<CR>
autocmd Filetype ipynb nmap <silent><C-s>n :VimpyterStartNteract<CR>
'''



[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
on_ft = ['markdown','mkd']

[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['markdown','mkd']

[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = ['markdown','mkd']

[[plugins]]
repo = 'lambdalisue/vim-pyenv'
depends = ['jedi-vim']
on_source = ['jedi-vim']
on_ft = ['python', 'python3']
hook_post_source= '''
if jedi#init_python()
  function! s:jedi_auto_force_py_version() abort
    let major_version = pyenv#python#get_internal_major_version()
    call jedi#force_py_version(major_version)
  endfunction
  augroup vim-pyenv-custom-augroup
    autocmd! *
    autocmd User vim-pyenv-activate-post   call s:jedi_auto_force_py_version()
    autocmd User vim-pyenv-deactivate-post call s:jedi_auto_force_py_version()
  augroup END
endif
'''

[[plugins]]
repo = 'prettier/vim-prettier'
build = 'npm install'
on_ft = ['javascript', 'vue', 'typescript', 'css', 'less', 'scss']
hook_add = '''
let g:prettier#autoformat = 1
let g:prettier#quickfix_enabled = 0
let g:prettier#exec_cmd_async = 1
autocmd BufWritePre *.js,*.css,*.scss,*.less PrettierAsync
'''

[[plugins]]
repo = 'ternjs/tern_for_vim'
on_ft = ['javascript']
build = 'npm i -g tern'
hook_add = '''
function! s:js_keymap()
    nnoremap <buffer><silent> K :TernDoc<CR>
    nnoremap <buffer><silent> gd :TernDef<CR>
    nnoremap <buffer><silent> <F2> :TernRename<CR>
    nnoremap <buffer><silent> <C-h> :TernRefs<CR>
endfunction
autocmd FileType javascript :call s:js_keymap()
'''

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
on_ft = ['javascript']
[[plugins]]
repo = 'mhartington/nvim-typescript'
build = 'bash install.sh'
on_ft = ['javascript', 'typescript']
hook_add = '''
let g:nvim_typescript#javascript_support = 1
let g:nvim_typescript#type_info_on_hold = 1
let g:nvim_typescript#max_completion_detail = 3
let g:nvim_typescript#default_signs =
      \ get(g:, 'nvim_typescript#default_signs', [
      \{
      \  'TSinformation': {
      \   'texthl': 'SpellBad',
      \   'signText': '•',
      \   'signTexthl': 'NeomakeInfoSign'
      \   }
      \},
      \{
      \  'TShint': {
      \   'texthl': 'SpellBad',
      \   'signText': '?',
      \   'signTexthl': 'NeomakeInfoSign'
      \   }
      \}
      \])
function! s:ts_keymap()
    nnoremap <buffer><silent> K :TSDoc<CR>
    nnoremap <buffer><silent> gd :TSDef<CR>
    nnoremap <buffer><silent> <F2> :TSRename<CR>
    nnoremap <buffer><silent> <C-h> :TSRefs<CR>
endfunction
autocmd FileType typescript :call s:ts_keymap()
'''

[[plugins]]
repo = 'beanworks/vim-phpfmt'
on_ft = ['php']
hook_add = '''
let g:phpfmt_standard = 'PSR2'
let g:phpfmt_autosave = 0
'''

# [[plugins]]
# repo = 'zchee/deoplete-go'
# depends = ['deoplete.nvim']
# on_ft = ['go']
# build = '''make '''
# hook_add = '''
# let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
# let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
# " let g:deoplete#sources#go#package_dot = 1
# " let g:deoplete#sources#go#pointer = 1
# " let g:deoplete#sources#go#builtin_objects = 1
# " let g:deoplete#sources#go#source_importer = 1
# '''


##############
### Python ###
##############

# [[plugins]]
# repo = 'davidhalter/jedi-vim'
# on_ft = ['python','python3','djangohtml', 'ipynb']
# hook_add = '''
# " jediにvimの設定を任せると'completeopt+=preview'するので 自動設定機能をOFFにし手動で設定を行う
# " let g:jedi#auto_vim_configuration = 0
# " let g:jedi#auto_initialization = 0
# " let g:jedi#smart_auto_mappings = 0
# let g:jedi#completions_enabled = 0
# " 補完の最初の項目が選択された状態だと使いにくいためオフにする
# " let g:jedi#popup_select_first = 0
# " let g:jedi#popup_on_dot = 1
# " let g:jedi#completions_command = '<C-d>'
#
# let g:jedi#documentation_command = 'K'
# let g:jedi#rename_command = '<F2>'
# let g:jedi#goto_command = 'gd'
# let g:jedi#usages_command = '<C-h>'
# '''
#
# [[plugins]]
# repo = 'zchee/deoplete-jedi'
# depends = ['deoplete.nvim']
# on_ft = ['python', 'python3', 'ipynb']
#
# [[plugins]]
# repo = 'jmcantrell/vim-virtualenv'
# on_ft = ['python', 'python3', 'ipynb']


###########
### LSP ###
###########

# [[plugins]]
# repo = 'autozimu/LanguageClient-neovim'
# depends = ['deoplete.nvim']
# on_ft = ['sh', 'go', 'bash', 'vue', 'typescript', 'javascript', 'javascript.jsx', 'ruby']
# rev = 'next'
# build = '''
# bash install.sh
# chmod +x bin/languageclient
# '''
# hook_add = '''
# set hidden
#
# let g:LanguageClient_rootMarkers = {
#         \ 'go': ['.git', 'go.mod'],
#         \ }
#
# let g:LanguageClient_windowLogMessageLevel = 'Error'
# "  ALEでコントロールする
# let g:LanguageClient_diagnosticsEnable = 0
# let g:LanguageClient_serverCommands = {
#     \ 'typescript':     ['npx', 'javascript-typescript-stdio'],
#     \ 'javascript':     ['npx', 'javascript-typescript-stdio'],
#     \ 'javascript.jsx': ['npx', 'javascript-typescript-stdio'],
#     \ 'go': ['bingo', '--mode', 'stdio', '--pprof', ':6060'],
#     \ 'bash': ['bash-language-server', 'start'],
#     \ 'sh':   ['bash-language-server', 'start'],
#     \ 'css':  ['css-languageserver', '--stdio'],
#     \ 'ruby': ['solargraph', 'stdio'],
#     \ 'vue':  ['vls'],
# "   \ 'php':  ['php', './vendor/bin/php-language-server.php'],
# "   \ 'rust': ['rustup', 'run', 'stable', 'rls'],
#     \ }
#
# function! s:langserver_keymap()
#     nnoremap <buffer><silent> <F10> :LanguageClientStart<CR>
#     nnoremap <buffer><silent> K :call LanguageClient_textDocument_hover()<CR>
#     nnoremap <buffer><silent> gd :call LanguageClient_textDocument_definition()<CR>
#     nnoremap <buffer><silent> <C-]> :call LanguageClient_textDocument_definition()<CR>
#     nnoremap <buffer><silent> <F2> :call LanguageClient_textDocument_rename()<CR>
#     nnoremap <buffer><silent> ge :call LanguageClient_textDocument_references()<CR>
# endfunction
#
# " autocmd FileType php :call s:langserver_keymap()
# " autocmd FileType rust :call s:langserver_keymap()
# autocmd FileType css,sh,go,bash,vue,typescript,javascript,javascript.jsx,ruby :call s:langserver_keymap()
# '''

#[[plugins]]
#repo = 'cohama/lexima.vim'
#on_i = 1
#hook_add = '''
#let g:lexima_ctrlh_as_backspace = 1
#'''
#hook_post_source = '''
#" ただし、以下の場合は補完しない
#" コメント内では補完しない
#call lexima#add_rule({'char': '(', 'input': '(', 'syntax' : 'Comment'})
#call lexima#add_rule({'char': '{', 'input': '{', 'syntax' : 'Comment'})
#call lexima#add_rule({'char': '[', 'input': '[', 'syntax' : 'Comment'})
#
#" 文字列内では補完しない
#call lexima#add_rule({'char': '(', 'input': '(', 'syntax' : 'String'})
#call lexima#add_rule({'char': '{', 'input': '{', 'syntax' : 'String'})
#call lexima#add_rule({'char': '[', 'input': '[', 'syntax' : 'String'})
#
# " |) の場合は補完しない
# " call lexima#add_rule({'char': '(', 'input': '(', 'at': '\%#)'})
# " call lexima#add_rule({'char': '{', 'input': '{', 'at': '\%#}'})
# " call lexima#add_rule({'char': '[', 'input': '[', 'at': '\%#]'})
#
#
# '''


[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim']
on_event = 'BufRead'
hook_add = '''
nnoremap [denite] <Nop>
nmap <Leader> [denite]
" let ignore=&wildignore . ',.idea,.php_cs_cache,*.pyc,.git,.hg,.svn,node_modules,vendor,mock,laradock,dbsample,docs,public'
"############
"### Grep ###
"############
nnoremap <silent> [denite]p :<C-u>Denite
    \ -direction=topleft
    \ -auto-preview
    \ -vertical-preview
    \ -highlight-mode-insert=Search
    \ -cursor-wrap=true grep<CR>

"#########################
"### Current Directory ###
"#########################
nnoremap <silent> [denite]f :<C-u>Denite
    \ -direction=topleft
    \ -highlight-mode-insert=Search
    \ -cursor-wrap=true file_rec<CR>

"##################
"### References ###
"##################
nnoremap <silent> [denite]r :<C-u>Denite
    \ -direction=topleft
    \ -auto-preview
    \ -vertical-preview
    \ -auto-highlight
    \ -highlight-mode-insert=Search
    \ -cursor-wrap=true references<CR>

"##############
"### Buffer ###
"##############
nnoremap <silent> [denite]b :<C-u>Denite
    \ -direction=topleft
    \ -auto-preview
    \ -vertical-preview
    \ -cursor-wrap=true buffer<CR>

"################
"### Register ###
"################
nnoremap <silent> [denite]R :<C-u>Denite
    \ -direction=topleft
    \ -cursor-wrap=true
    \ -buffer-name=register register<CR>

"###########
"### MRU ###
"###########
nnoremap <silent> [denite]m :<C-u>Denite
    \ -direction=topleft
    \ -cursor-wrap=true file_mru<CR>

"################
"### Bookmark ###
"################
nnoremap <silent> [denite]c :<C-u>Denite
    \ -direction=topleft
    \ -cursor-wrap=true bookmark<CR>

"####################
"### Add Bookmark ###
"####################
nnoremap <silent> [denite]a :<C-u>DeniteBookmarkAdd<CR>

".git以下のディレクトリ検索
nnoremap <silent> [denite]k :<C-u>Denite
    \ -direction=topleft
    \ -cursor-wrap=true
    \ -path=`substitute(finddir('.git', './;'), '.git', '', 'g')`
    \ file_rec/git<CR>
'''
hook_post_source =
'''
call denite#custom#map('insert', '<C-N>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<C-P>', '<denite:move_to_previous_line>', 'noremap')
call denite#custom#map('insert', '<C-W>', '<denite:move_up_path>', 'noremap')

call denite#custom#var('file_rec/git', 'command', ['git', 'ls-files', '-co',    '--exclude-standard'])
call denite#custom#var('file_rec',     'command', ['rg',  '--files',  '--glob', '!.git'])

call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

call denite#custom#source('file',     'matchers', ['matcher_cpsm', 'matcher_fuzzy'])
call denite#custom#source('buffer',   'matchers', ['matcher_regexp'])
call denite#custom#source('file_mru', 'matchers', ['matcher_regexp'])
call denite#custom#alias('source', 'file_rec/git', 'file_rec')
'''


