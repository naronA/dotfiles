" \   'go' : ['gometalinter'],
" "let g:ale_go_gometalinter_options = '--fast --enable=staticcheck --enable=gosimple --enable=unused'

[[plugins]]
repo = 'junegunn/fzf'
build = '''
bash install --all
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
let g:fzf_layout = { 'up': '~40%' }
nnoremap [fzf] <Nop>
nmap <Leader> [fzf]
nnoremap <silent> [fzf]f :FZF<CR>
nnoremap <silent> [fzf]b :Buffers<CR>
nnoremap <silent> [fzf]g :GFiles<CR>
nnoremap <silent> [fzf]x :Commands<CR>
nnoremap <silent> [fzf]a :Ag<CR>
'''


[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {
\     "_" : {
\         "runner" : "vimproc",
\         "runner/vimproc/updatetime" : 40,
\     }
\ }
'''

[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
nnoremap [denite] <Nop>
nmap <Leader> [denite]

"現在開いているファイルのディレクトリ下のファイル一覧。
" nnoremap <silent> [denite]f :<C-u>DeniteBufferDir -direction=topleft -cursor-wrap=true file file:new<CR>
nnoremap <silent> [denite]f :<C-u>Denite -direction=topleft -cursor-wrap=true file_rec<CR>
"バッファ一覧
nnoremap <silent> [denite]b :<C-u>Denite -direction=topleft -cursor-wrap=true buffer<CR>
"レジスタ一覧
"nnoremap <silent> [denite]r :<C-u>Denite -direction=topleft -cursor-wrap=true -buffer-name=register register<CR>
"最近使用したファイル一覧
nnoremap <silent> [denite]m :<C-u>Denite -direction=topleft -cursor-wrap=true file_mru<CR>
"ブックマーク一覧
nnoremap <silent> [denite]c :<C-u>Denite -direction=topleft -cursor-wrap=true bookmark<CR>
"ブックマークに追加
nnoremap <silent> [denite]a :<C-u>DeniteBookmarkAdd<CR>

".git以下のディレクトリ検索
nnoremap <silent> [denite]k :<C-u>Denite -direction=topleft -cursor-wrap=true
    \ -path=`substitute(finddir('.git', './;'), '.git', '', 'g')`
    \ file_rec/git<CR>

call denite#custom#source('file', 'matchers', ['matcher_cpsm', 'matcher_fuzzy'])
call denite#custom#source('buffer', 'matchers', ['matcher_regexp'])
call denite#custom#source('file_mru', 'matchers', ['matcher_regexp'])

call denite#custom#alias('source', 'file_rec/git', 'file_rec')
call denite#custom#var('file_rec/git', 'command',
    \ ['git', 'ls-files', '-co', '--exclude-standard'])

let ignore=&wildignore . ',*.pyc,.git,.hg,.svn,node_modules,vendor'
let ignore=&wildignore . ',.idea,.php_cs_cache,*.pyc,.git,.hg,.svn,node_modules,vendor'
call denite#custom#var('file_rec', 'command', ['scantree.py', '--ignore', ignore])

call denite#custom#map('insert', '<C-N>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<C-P>', '<denite:move_to_previous_line>', 'noremap')
call denite#custom#map('insert', '<C-W>', '<denite:move_up_path>', 'noremap')
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=237 ctermbg=237
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=238 ctermbg=238
" let g:indent_guides_guide_size = 1
'''

[[plugins]] # j,kによる移動を爆速に
repo = 'rhysd/accelerated-jk'
hook_add = '''
let g:accelerated_jk_enable_deceleration = 1
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)
'''

################
### terminal ###
################
# tmuxやscreen経由で別ペインに転送する
[[plugins]]
repo = 'jpalardy/vim-slime'


###################
### CTAGS/GTAGS ###
###################

[[plugins]]
repo = 'jsfaint/gen_tags.vim'
hook_add = '''
let g:gen_tags#ctags_auto_gen = 1
let g:gen_tags#gtags_auto_gen = 1
'''

[[plugins]]
repo = '5t111111/alt-gtags.vim'
hook_add = '''
map <C-n> :cn<CR>
map <C-p> :cp<CR>
nnoremap <Leader>g :AltGtags<CR>
nnoremap <Leader>h :AltGtags -r<CR>
nnoremap <Leader>k :AltGtags -s<CR>
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = 'nmap <F8> :TagbarToggle<CR>'

##################
### Statusline ###
##################
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline_section_b = "%t %M"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline_theme = 'tomorrow'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

###################
### Dark Powers ###
###################

# [[plugins]]
# repo = 'Shougo/defx.nvim'
# hook_add = '''
# nmap <F9> :Defx -split=vertical -winwidth=45 -toggle <CR>
# nmap <silent><Leader>n :Defx -split=vertical -winwidth=45 -toggle <CR>
# nmap <silent><Leader>h :Defx `expand('%:p:h')` -search=`expand('%:p')`<CR>
# autocmd FileType defx call s:defx_my_settings()
# function! s:defx_my_settings() abort
#   " Define mappings
#   nnoremap <silent><buffer><expr> <CR>
#   \ defx#do_action('drop')
#   nnoremap <silent><buffer><expr> c
#   \ defx#do_action('copy')
#   nnoremap <silent><buffer><expr> m
#   \ defx#do_action('move')
#   nnoremap <silent><buffer><expr> p
#   \ defx#do_action('paste')
#   nnoremap <silent><buffer><expr> l
#   \ defx#do_action('drop')
#   nnoremap <silent><buffer><expr> E
#   \ defx#do_action('drop', 'vsplit')
#   nnoremap <silent><buffer><expr> P
#   \ defx#do_action('drop', 'pedit')
#   nnoremap <silent><buffer><expr> K
#   \ defx#do_action('new_directory')
#   nnoremap <silent><buffer><expr> N
#   \ defx#do_action('new_file')
#   nnoremap <silent><buffer><expr> M
#   \ defx#do_action('new_multiple_files')
#   nnoremap <silent><buffer><expr> d
#   \ defx#do_action('remove')
#   nnoremap <silent><buffer><expr> r
#   \ defx#do_action('rename')
#   nnoremap <silent><buffer><expr> !
#   \ defx#do_action('execute_command')
#   nnoremap <silent><buffer><expr> x
#   \ defx#do_action('execute_system')
#   nnoremap <silent><buffer><expr> yy
#   \ defx#do_action('yank_path')
#   nnoremap <silent><buffer><expr> .
#   \ defx#do_action('toggle_ignored_files')
#   nnoremap <silent><buffer><expr> ;
#   \ defx#do_action('repeat')
#   nnoremap <silent><buffer><expr> h
#   \ defx#do_action('cd', ['..'])
#   nnoremap <silent><buffer><expr> ~
#   \ defx#do_action('cd')
#   nnoremap <silent><buffer><expr> q
#   \ defx#do_action('quit')
#   nnoremap <silent><buffer><expr> <Space>
#   \ defx#do_action('toggle_select') . 'j'
#   nnoremap <silent><buffer><expr> *
#   \ defx#do_action('toggle_select_all')
#   nnoremap <silent><buffer><expr> j
#   \ line('.') == line('$') ? 'gg' : 'j'
#   nnoremap <silent><buffer><expr> k
#   \ line('.') == 1 ? 'G' : 'k'
#   nnoremap <silent><buffer><expr> <C-l>
#   \ defx#do_action('redraw')
#   nnoremap <silent><buffer><expr> <C-g>
#   \ defx#do_action('print')
#   nnoremap <silent><buffer><expr> cd
#   \ defx#do_action('change_vim_cwd')
# endfunction
# '''


" if ! has('nvim')
" " OptionキーをMetaキーとして使う。
"     let s:c = 'a'
"     while s:c <=# 'z'
"         execute 'set <M-' . s:c . '>=\e' . s:c
"         execute 'imap \e' . s:c . ' <M-' . s:c . '>'
"         execute 'set <M-S-' . s:c . '>=\e' . toupper(s:c)
"         execute 'imap \e' . toupper(s:c) . ' <M-' . s:c . '>'
"         let s:c = nr2char(1+char2nr(s:c))
"     endw
" endif


##################
### scratchpad ###
##################
# [[plugins]]
# repo = 'metakirby5/codi.vim'



