[[plugins]]
repo = 'Shougo/denite.nvim'

[[plugins]]
repo = 'Chiel92/vim-autoformat'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = 'let g:indent_guides_enable_on_vim_startup = 1'

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add ='''
let g:deoplete#enable_at_startup = 1
let g:deoplete#file#enable_buffer_path = 1

" let g:deoplete#omni#input_patterns = {}
" let g:deoplete#sources = {}
" let g:deoplete#ignore_sources = get(g:, 'deoplete#ignore_sources', {})
" let g:deoplete#ignore_sources._ = ['omni','buffer']
" let g:deoplete#ignore_sources.javascript = ['omni']
" let g:deoplete#ignore_sources.typescript = ['omni']
" let g:deoplete#ignore_sources.python = ['omni']
" let g:deoplete#ignore_sources.c = ['omni']
" let g:deoplete#ignore_sources.cpp = ['omni']
" let g:deoplete#ignore_sources.php = ['omni']
'''

[[plugins]]
repo = 'tpope/vim-surround'

################
### terminal ###
################
# tmuxやscreen経由で別ペインに転送する
[[plugins]]
repo = 'jpalardy/vim-slime'

#############
### Filer ###
#############

[[plugins]]
repo = 'Shougo/vimfiler.vim'
hook_add = 'nmap <F7> :VimFilerExplorer -winwidth=40 -no-quit<CR>'

# vimfiler に必要
[[plugins]]
repo   = 'Shougo/unite.vim'
depends = ['neomru.vim', 'vimfiler.vim', 'vimshell']
on_cmd = ['Unite']

# unite.vim を読み込んだら一緒に読み込む
[[plugins]]
repo      = 'Shougo/neomru.vim'
on_source = ['unite.vim']

[[plugins]]
repo = 'Shougo/vimshell'

[[plugins]]
repo = 'scrooloose/nerdtree.git'
hook_add = '''
nmap <F9> :NERDTreeToggle<CR>
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['^Dockerfile.*'] = ''
'''

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'

###################
### CTAGS/GTAGS ###
###################

[[plugins]]
repo = 'jsfaint/gen_tags.vim'
hook_add = '''
let g:gen_tags#ctags_auto_gen = 1
let g:gen_tags#gtags_auto_gen = 1
'''

[[plugins]]
repo = '5t111111/alt-gtags.vim'
hook_add = '''
map <C-n> :cn<CR>
map <C-p> :cp<CR>
nnoremap <Leader>g :AltGtags<CR>
nnoremap <Leader>h :AltGtags -r<CR>
nnoremap <Leader>k :AltGtags -s<CR>
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = 'nmap <F8> :TagbarToggle<CR>'

##################
### コード整理 ###
##################

# http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
[[plugins]]
repo = 'godlygeek/tabular'

#######################
### vim status line ###
#######################

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
let g:webdevicons_enable = 1
let g:webdevicons_enable_vimfiler = 1
let g:webdevicons_enable_nerdtree = 1
let g:webdevicons_enable_airline = 1
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1
'''

####################
### vim air line ###
####################

[[plugins]]
repo    = 'vim-airline/vim-airline'
depends = ['vim-fugitive', 'vim-airline-themes']
hook_add = '''
let g:airline_powerline_fonts = 1
let g:airline_theme = 'powerlineish'
let g:airline_exclude_preview = 1
let g:airline#extensions#tabline#enabled = 1
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo    = 'tpope/vim-fugitive'

[[plugins]]
repo = 'dbakker/vim-projectroot'
hook_add = '''
function! <SID>AutoProjectRootCD()
    try
        if &ft != 'help'
        ProjectRootCD
    endif
    catch
        " Silently ignore invalid buffers
    endtry
endfunction

autocmd BufEnter * call <SID>AutoProjectRootCD()
'''

####################
### カラーテーマ ###
####################

[[plugins]]
repo = 'naronA/dracula-vim'

####################
### 文法チェック ###
####################

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_linters = {
\   'python': ['autopep8','flake8', 'isort'],
\   'python3': ['autopep8','flake8', 'isort'],
\   'typescript': ['prettier', 'tslint', 'tsserver', 'typecheck'],
\   'javascript': ['eslint','prettier'],
\}
let g:ale_sign_error = '⨉'       " エラー行に表示するマーク
let g:ale_sign_warning = '⚠'     " エラー行に表示するマーク
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]' " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
let g:ale_sign_column_always = 0 " エラー表示の列を常時表示

let g:ale_lint_on_enter = 1      " ファイルを開いたときにlint実行
let g:ale_lint_on_save = 1       " ファイルを保存したときにlint実行
let g:ale_lint_on_text_changed = 'never' " 編集中のlintはしない

" lint結果をロケーションリストとQuickFixには表示しない。QuickFixを書き換えられるのは困る
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0
let g:ale_php_phpcs_standard = 'PSR2'
let g:ale_set_highlights = 1
'''
