###########
### Coc ###
###########

[[plugins]]
repo = 'neoclide/coc.nvim'
# on_path = ['.*']
build = 'yarn install'
hook_add = '''

let g:coc_global_extensions = ['coc-json', 'coc-vetur', 'coc-html', 'coc-pyls', 'coc-tsserver', 'coc-css', 'coc-eslint', 'coc-wxml' ]
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` for navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
" autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
" vmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
vmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` for format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` for fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Shortcuts for denite interface
" Show extension list
" nnoremap <silent> <space>e  :<C-u>Denite coc-extension<cr>
" Show symbols of current buffer
" nnoremap <silent> <space>o  :<C-u>Denite coc-symbols<cr>
" Search symbols of current workspace
" nnoremap <silent> <space>t  :<C-u>Denite coc-workspace<cr>
" Show diagnostics of current workspace
" nnoremap <silent> <space>a  :<C-u>Denite coc-diagnostic<cr>
" Show available commands
" nnoremap <silent> <space>c  :<C-u>Denite coc-command<cr>
" Show available services
" nnoremap <silent> <space>s  :<C-u>Denite coc-service<cr>
" Show links of current buffer
" nnoremap <silent> <space>l  :<C-u>Denite coc-link<cr>
'''

###################
### Dark Powers ###
###################

[[plugins]]
repo = 'Shougo/dein.vim'

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# hook_add ='''
# let g:deoplete#enable_at_startup = 1
# let g:deoplete#min_pattern_length = 1
# '''

[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

##################
### scratchpad ###
##################
[[plugins]]
repo = 'metakirby5/codi.vim'

######################
### マルチカーソル ###
######################
[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
nnoremap <silent> <Leader>o :OverCommandLine<CR>
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
'''

####################
### 文法チェック ###
####################

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
nmap <silent> <Leader>/ :ALEFix<CR>
nmap <silent> <leader>jj :ALENext<CR>
nmap <silent> <leader>kk :ALEPrevious<CR>

let g:ale_linters = {
\   'javascript': ['eslint'],
\   'javascript.jsx': ['eslint'],
\   'php': ['phpcs', 'php', 'php_cs_fixer'],
\   'go': ['golint', 'govet', 'golangci-lint'],
\   'python': ['pycodestyle',  'pylint', 'mypy', 'flake8', 'isort'],
\   'python3': ['pycodestyle', 'pylint', 'mypy', 'flake8', 'isort'],
\   'ruby': ['ruby'],
\   'typescript': ['eslint', 'tsserver'],
\   'vue': ['eslint', 'vls'],
\   'zsh': ['shellcheck'],
\   'yaml': ['prettier'],
\}

if $TERM_PROGRAM ==? 'hyper' || exists('$TMUX')
  let g:ale_sign_error = 'E>'       " エラー行に表示するマーク
  let g:ale_sign_warning = 'w*'     " エラー行に表示するマーク
else
  let g:ale_sign_error = ''       " エラー行に表示するマーク
  let g:ale_sign_warning = ''     " エラー行に表示するマーク
endif

let g:ale_echo_msg_format = '[%linter%] %s [%severity%]' " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
let g:ale_sign_column_always = 1 " エラー表示の列を常時表示
let g:ale_completion_enabled = 0
let g:ale_virtualtext_cursor = 1

let g:ale_lint_on_enter = 1      " ファイルを開いたときにlint実行
let g:ale_lint_on_save = 1       " ファイルを保存したときにlint実行
let g:ale_fix_on_save = 0        " ファイルを保存したときにfix実行
let g:ale_lint_delay = 50
let g:ale_lint_on_text_changed = 'never' " always or never

" lint結果をロケーションリストとQuickFixには表示しない。QuickFixを書き換えられるのは困る
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0
let g:ale_php_phpcs_use_global = 1
let g:ale_php_phpcs_standard = 'PSR2'
let g:ale_javascript_eslint_options = '--cache'
let g:ale_python_mypy_options='--ignore-missing-imports --follow-imports=silent --show-column-numbers'
let g:ale_javascript_eslint_suppress_eslintignore = 1
let g:ale_php_cs_fixer_options = '--rules=@PSR1,@PSR2'
let g:ale_go_golangci_lint_options = '
\ --fast
\ -D=typecheck
\ -D=gochecknoglobals
\ -E=gosimple
\ -E=staticcheck
\'

" \ -E=lll
" \ -E=unparam
" \ -E=unused
" \ 'go': ['gofmt'],

let g:ale_set_highlights = 1
let g:ale_fixers = {
    \ 'bash': ['shfmt'],
    \ 'go': ['gofmt', 'goimports'],
    \ 'javascript': ['eslint'],
    \ 'javascript.jsx': ['eslint'],
    \ 'json': ['prettier'],
    \ 'php': ['php_cs_fixer'],
    \ 'python': ['autopep8', 'yapf', 'isort'],
    \ 'python3': ['autopep8', 'yapf', 'isort'],
    \ 'sh': ['shfmt'],
    \ 'typescript': ['eslint'],
    \ 'vue': ['eslint'],
    \ 'yaml': ['prettier'],
    \ }
'''

########################
### Syntax Highlight ###
########################
### Protocol Buffer ###
[[plugins]]
repo = 'uarun/vim-protobuf'

### pug ###
[[plugins]]
repo = 'digitaltoad/vim-pug'

### java script ###
[[plugins]]
repo = 'jelera/vim-javascript-syntax'
# repo = 'othree/yajs.vim'

### TypeScript. ###
[[plugins]]
repo = 'leafgarland/typescript-vim'

### Vue ###
[[plugins]]
repo = 'posva/vim-vue'

### JSX ###
[[plugins]]
repo = 'mxw/vim-jsx'

### TOML ###
[[plugins]]
repo = 'cespare/vim-toml'

### yaml ###
[[plugins]]
repo = 'stephpy/vim-yaml'

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'

### JSON ###
[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']
hook_add = '''
let g:vim_json_syntax_conceal = 0
'''


#############
### Mics ####
#############
[[plugins]]
repo = 'deris/vim-shot-f'

[[plugins]]
repo = 'andymass/vim-matchup'

[[plugins]]
repo = 'machakann/vim-highlightedyank'


[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
let g:winresizer_vert_resize = 1
let g:winresizer_horiz_resize = 1
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = 'vnoremap <silent> <Enter> :EasyAlign<cr>'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_showFirstIndentLevel = 1
let g:indentLine_bufNameExclude = ['_.*', 'NERD_tree.*', '_defx.*']
let g:indentLine_bufTypeExluce = ['help', 'nerdtree', 'defx', 'terminal']
let g:indentLine_fileTypeExluce = ['help', 'nerdtree', 'defx']
let g:indentLine_color_term = 238
let g:indentLine_color_gui = '#676767'
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
if $TERM_PROGRAM ==? 'hyper' || exists('$TMUX')
    let g:webdevicons_enable = 0
    let g:webdevicons_enable_nerdtree = 0
    let g:webdevicons_enable_defx = 0
    let g:webdevicons_enable_vimfiler = 0
    let g:webdevicons_enable_denite = 0
else
    let g:webdevicons_enable = 1
    let g:webdevicons_enable_defx = 1
    let g:webdevicons_enable_vimfiler = 1
    let g:webdevicons_enable_denite = 1
    let g:webdevicons_enable_nerdtree = 1
endif

let g:NERDTreeExtensionHighlightColor = {}
let g:NERDTreeExtensionHighlightColor['vue'] = "41B883"
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['vue'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['^Dockerfile.*'] = ''
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
let g:WebDevIconsUnicodeDecorateFolderNodes = 1

let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
let g:webdevicons_conceal_nerdtree_brackets = 1
'''

[[plugins]]
repo = 'dbakker/vim-projectroot'
hook_add = '''
function! <SID>AutoProjectRootCD()
    try
        if &ft != 'help'
        ProjectRootCD
    endif
    catch
        " Silently ignore invalid buffers
    endtry
endfunction

autocmd BufEnter * call <SID>AutoProjectRootCD()
'''

# http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
[[plugins]]
repo = 'godlygeek/tabular'

###########
### Git ###
###########
[[plugins]]
repo = 'rhysd/git-messenger.vim'

[[plugins]]
repo = 'cohama/agit.vim'

[[plugins]]
repo    = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

#############
### Filer ###
#############

[[plugins]]
repo = 'scrooloose/nerdtree.git'
# hook_add = '''
# nmap <F9> :NERDTreeToggle<CR>
# nmap <silent><Leader>n :NERDTreeToggle<CR>
# nmap <silent><Leader>h :NERDTreeFind<CR>
# let g:NERDTreeMapActivateNode = "l"
# let g:NERDTreeWinSize = 40
# let g:NERDTreeLimitedSyntax = 1
# '''

####################
### カラーテーマ ###
####################

# repo = 'naronA/dracula-vim'
[[plugins]]
repo = 'rhysd/vim-color-spring-night'
hook_add = '''
let g:spring_night_kill_italic = 1
'''

##################
### Statusline ###
##################
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], ['fugitive', 'filename', 'modified', 'readonly' ] ],
      \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'tabline': {'left': [['buffers']], 'right': [['close']]},
      \ 'component_function': {
      \   'cocstatus': 'coc#status',
      \   'fugitive': 'LightlineFugitive',
      \   'filename': 'LightlineFilename',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding',
      \   'mode': 'LightlineMode',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \   'buffers': 'lightline#bufferline#buffers',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \   'buffers': 'tabsel',
      \ },
      \ 'subseparator': { 'left': '|', 'right': '|' }
      \ }

function! LightlineModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! LightlineFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' && has_key(g:lightline, 'ctrlp_item') ? g:lightline.ctrlp_item :
        \ fname == '__Tagbar__' ? g:lightline.fname :
        \ fname =~ '__Gundo\|NERD_tree' ? '' :
        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'unite' ? unite#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let branch = fugitive#head()
      return branch !=# '' ? mark.branch : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP' && has_key(g:lightline, 'ctrlp_item')
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction

augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
nmap <silent><Leader>n :Defx -split=vertical -winwidth=40 -toggle<CR> :IndentLinesDisable<CR>
nmap <silent><Leader>h :Defx `expand('%:p:h')` -search=`expand('%:p')`<CR> :IndentLinesDisable<CR>
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> c      defx#do_action('copy')
  nnoremap <silent><buffer><expr> m      defx#do_action('move')
  nnoremap <silent><buffer><expr> p      defx#do_action('paste')
  nnoremap <silent><buffer><expr> o      defx#is_directory() ? defx#do_action('open_or_close_tree') : ''
  " nnoremap <silent><buffer><expr> l      ! defx#is_directory() ? defx#do_action('open_or_close_tree') : defx#do_action('drop')
  nnoremap <silent><buffer><expr> l      ! defx#is_directory() ? defx#do_action('drop') : ''
  nnoremap <silent><buffer><expr> E      defx#is_directory() ? defx#do_action('open_or_close_tree') : defx#do_action('drop', 'vsplit')
  nnoremap <silent><buffer><expr> P      defx#is_directory() ? defx#do_action('open_or_close_tree') : defx#do_action('drop', 'pedit')
  nnoremap <silent><buffer><expr> K      defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N      defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M      defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> d      defx#do_action('remove')
  nnoremap <silent><buffer><expr> r      defx#do_action('rename')
  nnoremap <silent><buffer><expr> !      defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x      defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy     defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .      defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> cd     defx#do_action('change_vim_cwd')
  nnoremap <silent><buffer><expr> ;      defx#do_action('repeat')
  nnoremap <silent><buffer><expr> ~      defx#do_action('cd')
  nnoremap <silent><buffer><expr> q      defx#do_action('quit')
  nnoremap <silent><buffer><expr> *      defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j      line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k      line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-h>  defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> R  defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>  defx#do_action('print')
  nnoremap <silent><buffer><expr> <C-t>  defx#do_action('toggle_select') . 'j'
endfunction

if $TERM_PROGRAM ==? 'hyper' || exists('$TMUX')
    call defx#custom#column('filename', {
          \ 'directory_icon': '+',
          \ 'opened_icon': '-',
          \ 'root_icon': '@',
          \ })
else
    call defx#custom#column('filename', {
          \ 'directory_icon': '+ ',
          \ 'opened_icon': '- ',
          \ 'root_icon': '',
          \ })
endif
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'

# [[plugins]]
# repo='kristijanhusak/defx-icons'
# hook_add = '''
# -columns=icons:filename:type
# let g:defx_icons_enable_syntax_highlight = 1
# let g:defx_icons_column_length = 2
# '''
