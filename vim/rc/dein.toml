####################
### 文法チェック ###
####################

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_linters = {
\   'php': ['phpcs', 'php', 'php_cs_fixer'],
\   'python': ['autopep8','flake8', 'isort'],
\   'python3': ['autopep8','flake8', 'isort'],
\   'typescript': ['tslint', 'tsserver'],
\   'javascript': ['eslint'],
\   'go': ['gofmt', 'goimports', 'golint'],
\   'ruby': ['ruby'],
\   'vue': ['eslint', 'vls'],
\}
let g:ale_sign_error = '⨉'       " エラー行に表示するマーク
let g:ale_sign_warning = '⚠'     " エラー行に表示するマーク
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]' " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
let g:ale_sign_column_always = 0 " エラー表示の列を常時表示
let g:ale_completion_enabled = 0

let g:ale_lint_on_enter = 1      " ファイルを開いたときにlint実行
let g:ale_lint_on_save = 1       " ファイルを保存したときにlint実行
let g:ale_lint_on_text_changed = 'never' " 編集中のlintはしない

" lint結果をロケーションリストとQuickFixには表示しない。QuickFixを書き換えられるのは困る
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0
let g:ale_php_phpcs_use_global = 1
let g:ale_php_phpcs_standard = 'PSR2'
let g:ale_set_highlights = 1
let g:ale_fixers = {
    \ 'php': ['php_cs_fixer'],
    \ 'javascript': ['eslint'],
    \ 'typescript': ['tslint'],
    \ 'vue': ['eslint'],
    \ 'json': ['fixjson'],
    \ 'python': ['autopep8', 'isort'],
    \ 'python3': ['autopep8', 'isort'],
    \ 'go': ['golint'],
    \ }
'''

###############
### Jupyter ###
###############

[[plugins]]
repo = 'szymonmaszke/vimpyter'
on_ft = ['ipynb']
hook_add = '''
autocmd Filetype ipynb nmap <silent><Leader>b :VimpyterInsertPythonBlock<CR>
autocmd Filetype ipynb nmap <silent><Leader>j :VimpyterStartJupyter<CR>
autocmd Filetype ipynb nmap <silent><Leader>n :VimpyterStartNteract<CR>
'''

########################
### Syntax Highlight ###
########################

### java script ###
[[plugins]]
repo = 'othree/yajs.vim'
# repo = 'jelera/vim-javascript-syntax'

### TypeScript. ###
[[plugins]]
repo = 'leafgarland/typescript-vim'

### Vue ###
[[plugins]]
repo = 'posva/vim-vue'
hook_add = '''
" let g:vue_disable_pre_processors=1
'''

### JSX ###
[[plugins]]
repo = 'mxw/vim-jsx'

### TOML ###
[[plugins]]
repo = 'cespare/vim-toml'

### yaml ###
[[plugins]]
repo = 'stephpy/vim-yaml'

#############
### Mics ####
#############

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = 'vnoremap <silent> <Enter> :EasyAlign<cr>'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_showFirstIndentLevel=1
let g:indentLine_fileTypeExluce=['help', 'nerdtree']
let g:indentLine_color_term = 238
'''

# [[plugins]]
# repo = 'nathanaelkane/vim-indent-guides'
# hook_add = '''
# let g:indent_guides_enable_on_vim_startup = 1
# let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
# let g:indent_guides_auto_colors = 0
# autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=237 ctermbg=237
# autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=238 ctermbg=238
# " let g:indent_guides_guide_size = 1
# '''

[[plugins]] # j,kによる移動を爆速に
repo = 'rhysd/accelerated-jk'
hook_add = '''
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
let g:webdevicons_enable = 1
let g:webdevicons_enable_nerdtree = 1
let g:webdevicons_enable_defx = 1
let g:webdevicons_enable_denite = 1
let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['^Dockerfile.*'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.*vue$'] = ''
'''

[[plugins]]
repo = 'dbakker/vim-projectroot'
hook_add = '''
function! <SID>AutoProjectRootCD()
    try
        if &ft != 'help'
        ProjectRootCD
    endif
    catch
        " Silently ignore invalid buffers
    endtry
endfunction

autocmd BufEnter * call <SID>AutoProjectRootCD()
'''

# http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
[[plugins]]
repo = 'godlygeek/tabular'

###########
### Git ###
###########

[[plugins]]
repo    = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

###################
### Dark Powers ###
###################

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
endfunction
autocmd FileType defx call s:defx_my_settings()
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add ='''
let g:deoplete#enable_at_startup = 1
let g:deoplete#min_pattern_length = 2
let g:deoplete#refresh_always = v:true
let g:deoplete#file#enable_buffer_path = 1
" let g:deoplete#omni#input_patterns = {}
" let g:deoplete#sources = {}
" let g:deoplete#ignore_sources = get(g:, 'deoplete#ignore_sources', {})
" let g:deoplete#ignore_sources._ = ['omni','buffer']
" let g:deoplete#ignore_sources.javascript = ['omni']
" let g:deoplete#ignore_sources.typescript = ['omni']
" let g:deoplete#ignore_sources.python = ['omni']
" let g:deoplete#ignore_sources.c = ['omni']
" let g:deoplete#ignore_sources.cpp = ['omni']
" let g:deoplete#ignore_sources.php = ['omni']
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
nnoremap [denite] <Nop>
nmap <C-c> [denite]

"現在開いているファイルのディレクトリ下のファイル一覧。
" nnoremap <silent> [denite]f :<C-u>DeniteBufferDir -direction=topleft -cursor-wrap=true file file:new<CR>
nnoremap <silent> [denite]f :<C-u>Denite -direction=topleft -cursor-wrap=true file_rec<CR>
"バッファ一覧
nnoremap <silent> [denite]b :<C-u>Denite -direction=topleft -cursor-wrap=true buffer<CR>
"レジスタ一覧
"nnoremap <silent> [denite]r :<C-u>Denite -direction=topleft -cursor-wrap=true -buffer-name=register register<CR>
"最近使用したファイル一覧
nnoremap <silent> [denite]m :<C-u>Denite -direction=topleft -cursor-wrap=true file_mru<CR>
"ブックマーク一覧
nnoremap <silent> [denite]c :<C-u>Denite -direction=topleft -cursor-wrap=true bookmark<CR>
"ブックマークに追加
nnoremap <silent> [denite]a :<C-u>DeniteBookmarkAdd<CR>

".git以下のディレクトリ検索
nnoremap <silent> [denite]k :<C-u>Denite -direction=topleft -cursor-wrap=true
    \ -path=`substitute(finddir('.git', './;'), '.git', '', 'g')`
    \ file_rec/git<CR>

call denite#custom#source('file', 'matchers', ['matcher_cpsm', 'matcher_fuzzy'])
call denite#custom#source('buffer', 'matchers', ['matcher_regexp'])
call denite#custom#source('file_mru', 'matchers', ['matcher_regexp'])

call denite#custom#alias('source', 'file_rec/git', 'file_rec')
call denite#custom#var('file_rec/git', 'command',
    \ ['git', 'ls-files', '-co', '--exclude-standard'])

let ignore=&wildignore . ',*.pyc,.git,.hg,.svn,node_modules,vendor'
call denite#custom#var('file_rec', 'command', ['scantree.py', '--ignore', ignore])

call denite#custom#map('insert', '<C-N>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<C-P>', '<denite:move_to_previous_line>', 'noremap')
call denite#custom#map('insert', '<C-W>', '<denite:move_up_path>', 'noremap')
'''

[[plugins]]
repo      = 'Shougo/neomru.vim'

################
### terminal ###
################
# tmuxやscreen経由で別ペインに転送する
#[[plugins]]
#repo = 'jpalardy/vim-slime'

#############
### Filer ###
#############

[[plugins]]
repo = 'scrooloose/nerdtree.git'
hook_add = '''
nmap <F9> :NERDTreeToggle<CR>
let g:NERDTreeWinSize = 40
let g:NERDTreeLimitedSyntax = 1
'''

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'

###################
### CTAGS/GTAGS ###
###################

# [[plugins]]
# repo = 'jsfaint/gen_tags.vim'
# hook_add = '''
# let g:gen_tags#ctags_auto_gen = 1
# let g:gen_tags#gtags_auto_gen = 1
# '''
[[plugins]]
repo = '5t111111/alt-gtags.vim'
hook_add = '''
map <C-n> :cn<CR>
map <C-p> :cp<CR>
nnoremap <Leader>g :AltGtags<CR>
nnoremap <Leader>h :AltGtags -r<CR>
nnoremap <Leader>k :AltGtags -s<CR>
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = 'nmap <F8> :TagbarToggle<CR>'

####################
### カラーテーマ ###
####################

[[plugins]]
repo = 'naronA/dracula-vim'

#################
### lightline ###
#################

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
      \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightlineFugitive',
      \   'filename': 'LightlineFilename',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding',
      \   'mode': 'LightlineMode',
      \   'ctrlpmark': 'CtrlPMark',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ 'subseparator': { 'left': '|', 'right': '|' }
      \ }

function! LightlineModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! LightlineFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' && has_key(g:lightline, 'ctrlp_item') ? g:lightline.ctrlp_item :
        \ fname == '__Tagbar__' ? g:lightline.fname :
        \ fname =~ '__Gundo\|NERD_tree' ? '' :
        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'unite' ? unite#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let branch = fugitive#head()
      return branch !=# '' ? mark.branch : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP' && has_key(g:lightline, 'ctrlp_item')
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction

augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0
'''
