####################
### 文法チェック ###
####################
[[plugins]]
repo = 'w0rp/ale'
on_ft = ['c', 'cpp', 'sql', 'ruby', 'yaml', 'sh', 'typescript', 'dockerfile', 
         'javascript', 'scala', 'xml', 'vim', 'markdown', 'php','python','python3']
build = '''
cd $HOME/.vim/rc/
sh ale-build.sh
cd -
'''
hook_add = '''
let g:ale_linters = {
\   'python': ['autopep8','flake8', 'isort'],
\   'python3': ['autopep8','flake8', 'isort'],
\}
let g:ale_sign_error = '⨉'       " エラー行に表示するマーク
let g:ale_sign_warning = '⚠'     " エラー行に表示するマーク
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]' " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
let g:ale_sign_column_always = 0 " エラー表示の列を常時表示

let g:ale_lint_on_enter = 1      " ファイルを開いたときにlint実行
let g:ale_lint_on_save = 1       " ファイルを保存したときにlint実行
let g:ale_lint_on_text_changed = 'never' " 編集中のlintはしない

" lint結果をロケーションリストとQuickFixには表示しない。QuickFixを書き換えられるのは困る
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0
let g:ale_php_phpcs_standard = 'PSR2'
'''
#############
### C/C++ ###
#############
[[plugins]]
repo = 'justmao945/vim-clang'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'zchee/deoplete-clang'
on_ft = ['c', 'cpp', 'cmake']
hook_source = '''
if has('unix')
    let g:deoplete#sources#clang#libclang_path = '/usr/local/opt/llvm/lib/libclang.so'
    let g:deoplete#sources#clang#clang_header = '/usr/local/opt/llvm/include/clang'
endif
if has('mac') 
    let g:deoplete#sources#clang#libclang_path = '/usr/local/opt/llvm/lib/libclang.so'
    let g:deoplete#sources#clang#clang_header = '/usr/local/opt/llvm/include/clang'
endif
'''
depends = ['deoplete.nvim']

############
### TOML ###
############

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

#######################
### HTML / Markdown ###
#######################
[[plugins]]
repo = 'https://github.com/mattn/emmet-vim'
on_ft = ['html']

#[[plugins]]
#repo = 'plasticboy/vim-markdown'
#on_ft = ['markdown','mkd']

#[[plugins]]
#repo = 'joker1007/vim-markdown-quote-syntax'
#on_ft = ['markdown','mkd']

[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['markdown','mkd']

[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = ['markdown','mkd']

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
on_ft = ['php', 'json', 'typescript', 'javascript']
rev = 'next'
build = '''
bash install.sh
cd $HOME/.vim/rc/
# sh language-server.sh
cd -
'''
hook_source = '''
set hidden
"let s:php_version = substitute(system("phpenv version | awk {'print($1)'}"), '\n\+$','','')
"let s:php_lang_server_path = expand("$COMPOSER_HOME/vendor/bin/php-language-server.php")

let s:php_langserver = "./vendor/bin/php-language-server.php"
let s:js_langserver = "./node_modules/javascript-typescript-langserver/lib/javascript-typescript-stdio.js"
let g:LanguageClient_serverCommands = {
    \ 'php': ['php', s:php_langserver],
    \ 'typescript': [s:js_langserver],
    \ 'javascript': [s:js_langserver],
    \ 'javascript.jsx': [s:js_langserver],
    \ }

nnoremap <silent> <F10> :LanguageClientStart<CR>
nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
'''

###########
### PHP ###
###########
# [[plugins]]
# repo = 'lvht/phpcd.vim'
# on_ft = ['php']
# build = 'composer install'
# hook_add = ''

##################
### Javascript ###
##################
[[plugins]]
repo = 'moll/vim-node'
on_ft = ['typescript','javascript']
hook_add = '''
autocmd User Node
  \ if &filetype == "javascript" || &filetype == "javascript" |
  \   nmap <buffer> <C-w>f <Plug>NodeVSplitGotoFile |
  \   nmap <buffer> <C-w><C-f> <Plug>NodeVSplitGotoFile |
  \ endif
'''
[[plugins]]
repo = 'heavenshell/vim-jsdoc'
on_ft = ['typescript', 'javascript']

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript','javascript']

[[plugins]]
repo = 'mhartington/nvim-typescript'
on_ft = ['typescript']

### syntax highlighting
[[plugins]]
repo = 'jelera/vim-javascript-syntax'
on_ft = ['typescript','javascript']

############
### Ruby ###
############
[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = ['ruby']

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = ['ruby']

[[plugins]]
repo = 'hackhowtofaq/vim-solargraph'
buld = 'gem install json rest-client solargraph'
on_ft = ['ruby']

[[plugins]]
repo = 'uplus/deoplete-solargraph'
buld = '''
gem install solargraph
pip install solargraph-utils.py
yard gems 
yard config --gem-install-yri 
'''
on_ft = ['ruby']


#############
### Scala ###
#############
[[plugins]]
repo = 'derekwyatt/vim-scala'

##############
### Python ###
##############
[[plugins]]
repo = 'fisadev/vim-isort'
on_ft = ['python', 'python3', 'djangohtml']
hook_add = '''
let g:vim_isort_map = '<C-i>'
let g:vim_isort_python_version = 'python3'
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['python','python3','djangohtml']
hook_add = '''
" jediにvimの設定を任せると'completeopt+=preview'するので 自動設定機能をOFFにし手動で設定を行う
" let g:jedi#auto_vim_configuration = 0 
" let g:jedi#auto_initialization = 0
" let g:jedi#smart_auto_mappings = 0 
let g:jedi#completions_enabled = 0
" 補完の最初の項目が選択された状態だと使いにくいためオフにする
" let g:jedi#popup_select_first = 0
" let g:jedi#popup_on_dot = 1
" let g:jedi#completions_command = '<C-d>'

" quickrunと被るため大文字に変更
let g:jedi#rename_command = '<Leader>r'

" gundoと被るため大文字に変更
" let g:jedi#goto_command = '<Leader>d'
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = ['python', 'python3']

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = ['python', 'python3']

[[plugins]]
repo = 'tell-k/vim-autopep8'
on_ft = ['python', 'python3']
hook_add='let g:autopep8_disable_show_diff = 1'

[[plugins]]
repo = 'lambdalisue/vim-pyenv'
depends = ['jedi-vim']
on_source = ['jedi-vim']
on_ft = ['python', 'python3']
hook_post_source= '''
if jedi#init_python()
  function! s:jedi_auto_force_py_version() abort
    let major_version = pyenv#python#get_internal_major_version()
    call jedi#force_py_version(major_version)
  endfunction
  augroup vim-pyenv-custom-augroup
    autocmd! *
    autocmd User vim-pyenv-activate-post   call s:jedi_auto_force_py_version()
    autocmd User vim-pyenv-deactivate-post call s:jedi_auto_force_py_version()
  augroup END
endif
'''


