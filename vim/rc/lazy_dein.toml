[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
on_ft = ['javascript', 'typescript']
rev = 'next'
build = '''
bash install.sh
'''
hook_add = '''
set hidden
let s:php_langserver = "./vendor/bin/php-language-server.php"
let s:js_langserver = "./node_modules/.bin/javascript-typescript-stdio"

let g:LanguageClient_diagnosticsEnable = 0
let g:LanguageClient_serverCommands = {
"    \ 'php': ['php', s:php_langserver],
    \ 'typescript': [s:js_langserver],
    \ 'javascript': [s:js_langserver],
    \ }

"    \ 'ruby': ['tcp://127.0.0.1:7658'],

function! s:langserver_keymap()
    nnoremap <buffer><silent> <F10> :LanguageClientStart<CR>
    nnoremap <buffer><silent> K :call LanguageClient_textDocument_hover()<CR>
    nnoremap <buffer><silent> gd :call LanguageClient_textDocument_definition()<CR>
    nnoremap <buffer><silent> <F2> :call LanguageClient_textDocument_rename()<CR>
endfunction

"autocmd FileType php :call s:langserver_keymap()
autocmd FileType typescript :call s:langserver_keymap()
autocmd FileType javascript :call s:langserver_keymap()
" autocmd FileType php typescript :call s:langserver_keymap()
'''

#############
### C/C++ ###
#############

[[plugins]]
repo = 'justmao945/vim-clang'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'zchee/deoplete-clang'
on_ft = ['c', 'cpp', 'cmake']
depends = ['deoplete.nvim']
hook_source = '''
if has('unix')
    let g:deoplete#sources#clang#libclang_path = '/usr/lib/llvm-4.0/lib/libclang-4.0.so'
    let g:deoplete#sources#clang#clang_header = '/usr/lib/llvm-4.0/include/clang'
    if has('mac') 
        let g:deoplete#sources#clang#libclang_path = '/usr/local/opt/llvm/lib/libclang.so'
        let g:deoplete#sources#clang#clang_header = '/usr/local/opt/llvm/include/clang'
    endif
endif
'''

############
### TOML ###
############

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

#######################
### HTML / Markdown ###
#######################

[[plugins]]
repo = 'https://github.com/mattn/emmet-vim'
on_ft = ['html']

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown','mkd']

#[[plugins]]
#repo = 'joker1007/vim-markdown-quote-syntax'
#on_ft = ['markdown','mkd']

[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['markdown','mkd']

[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = ['markdown','mkd']

###########
### PHP ###
###########

[[plugins]]
repo = 'jwalton512/vim-blade'
on_ft = ['blade']
hook_add = '''
" Define some single Blade directives. This variable is used for highlighting only.
let g:blade_custom_directives = ['datetime', 'javascript']

" Define pairs of Blade directives. This variable is used for highlighting and indentation.
let g:blade_custom_directives_pairs = {
      \   'markdown': 'endmarkdown',
      \   'cache': 'endcache',
      \ }
'''

[[plugins]]
repo = 'beanworks/vim-phpfmt'
on_ft = ['php']
hook_add = '''
let g:phpfmt_standard = 'PSR2'
let g:phpfmt_autosave = 0
'''

[[plugins]]
repo = 'lvht/phpcd.vim'
on_ft = ['php']
build = 'composer install'
hook_add = '''
let g:deoplete#ignore_sources = get(g:, 'deoplete#ignore_sources', {})
let g:deoplete#ignore_sources.php = ['omni']
let g:phpcd_autoload_path = './vendor/autoload.php'

function! s:phpcd_keymap()
    silent! nnoremap <silent> <unique> <buffer> gd
        \ :<C-u>call phpcd#JumpToDefinition('normal')<CR>
    silent! nnoremap <silent> <unique> <buffer> <C-W><C-]>
        \ :<C-u>call phpcd#JumpToDefinition('split')<CR>
    silent! nnoremap <silent> <unique> <buffer> <C-W><C-\>
        \ :<C-u>call phpcd#JumpToDefinition('vsplit')<CR>
    silent! nnoremap <silent> <unique> <buffer> <C-t>
        \ :<C-u>call phpcd#JumpBack()<CR>
endfunction
autocmd FileType php :call s:phpcd_keymap()
'''

#############################
### Javascript/TypeScript ###
#############################

# [[plugins]]
# repo = 'ternjs/tern_for_vim'
# on_ft = ['javascript']
# build = 'npm i tern'
# hook_add = '''
# function! s:js_keymap()
#     nnoremap <buffer><silent> K :TernDoc<CR>
#     nnoremap <buffer><silent> gd :TernDef<CR>
#     nnoremap <buffer><silent> <F2> :TernRename<CR>
#     nnoremap <buffer><silent> <C-h> :TernRefs<CR>
# endfunction
# autocmd FileType javascript :call s:js_keymap()
# '''
# [[plugins]]
# repo = 'carlitux/deoplete-ternjs'
# on_ft = ['javascript']
# build = 'npm i -g tern'

[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']

[[plugins]]
repo = 'moll/vim-node'
on_ft = ['javascript']
hook_add = '''
autocmd User Node
  \ if &filetype == "javascript" || &filetype == "javascript" |
  \   nmap <buffer> <C-w>f <Plug>NodeVSplitGotoFile |
  \   nmap <buffer> <C-w><C-f> <Plug>NodeVSplitGotoFile |
  \ endif
'''
# syntax highlighting
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'javascript.jsx']
# repo = 'jelera/vim-javascript-syntax'

# [[plugins]]
# repo = 'mxw/vim-jsx'
# on_ft = ['javascript', 'javascript.jsx']

# jsdoc.vim generates JSDoc block comments based on a function signature.
[[plugins]]
repo = 'heavenshell/vim-jsdoc'
on_ft = ['typescript', 'javascript', 'javascript.jsx']
hook_add = '''
let g:typescript_compiler_binary = ''
let g:typescript_compiler_options = ''
'''

# Syntax file and other settings for TypeScript.
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

[[plugins]]
repo = 'ruanyl/vim-sort-imports'
on_ft = ['typescript']
hook_add = '''
'''

##########
### GO ###
##########

[[plugins]]
repo = 'zchee/nvim-go'
build = '''
make
go get -u github.com/constabulary/gb/...
'''

############
### Ruby ###
############

[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = ['ruby']

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = ['ruby']

# [[plugins]]
# repo = 'hackhowtofaq/vim-solargraph'
# buld = 'gem install json rest-client solargraph'
# on_ft = ['ruby']

# [[plugins]]
# repo = 'uplus/deoplete-solargraph'
# buld = '''
# gem install solargraph
# pip install solargraph-utils.py
# yard gems
# yard config --gem-install-yri
# '''
# on_ft = ['ruby']

#############
### Scala ###
#############

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = ['scala']

##############
### Python ###
##############

[[plugins]]
repo = 'fisadev/vim-isort'
on_ft = ['python', 'python3', 'djangohtml']
hook_add = '''
let g:vim_isort_map = '<C-i>'
let g:vim_isort_python_version = 'python3'
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['python','python3','djangohtml']
hook_add = '''
" jediにvimの設定を任せると'completeopt+=preview'するので 自動設定機能をOFFにし手動で設定を行う
" let g:jedi#auto_vim_configuration = 0
" let g:jedi#auto_initialization = 0
" let g:jedi#smart_auto_mappings = 0
let g:jedi#completions_enabled = 0
" 補完の最初の項目が選択された状態だと使いにくいためオフにする
" let g:jedi#popup_select_first = 0
" let g:jedi#popup_on_dot = 1
" let g:jedi#completions_command = '<C-d>'

let g:jedi#documentation_command = 'K'
let g:jedi#rename_command = '<F2>'
let g:jedi#goto_command = 'gd'
let g:jedi#usages_command = '<C-h>'
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = ['python', 'python3']

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = ['python', 'python3']

[[plugins]]
repo = 'tell-k/vim-autopep8'
on_ft = ['python', 'python3']
hook_add='let g:autopep8_disable_show_diff = 1'

# [[plugins]]
# repo = 'lambdalisue/vim-pyenv'
# depends = ['jedi-vim']
# on_source = ['jedi-vim']
# on_ft = ['python', 'python3']
# hook_post_source= '''
# if jedi#init_python()
#   function! s:jedi_auto_force_py_version() abort
#     let major_version = pyenv#python#get_internal_major_version()
#     call jedi#force_py_version(major_version)
#   endfunction
#   augroup vim-pyenv-custom-augroup
#     autocmd! *
#     autocmd User vim-pyenv-activate-post   call s:jedi_auto_force_py_version()
#     autocmd User vim-pyenv-deactivate-post call s:jedi_auto_force_py_version()
#   augroup END
# endif
# '''

# [[plugins]]
# repo = 'prettier/vim-prettier'
# build = 'npm install'
# on_ft = ['javascript', 'vue', 'typescript', 'css', 'less', 'scss']
# hook_add = '''
# let g:prettier#autoformat = 1
# let g:prettier#quickfix_enabled = 0
# let g:prettier#exec_cmd_async = 1
# autocmd BufWritePre *.js,*.css,*.scss,*.less PrettierAsync
# '''
