###########
### Coc ###
###########

[[plugins]]
repo = 'neoclide/coc.nvim'
build = 'yarn install'
on_path = ['.*']
hook_add = '''
set hidden
set cmdheight=2
set updatetime=300
set shortmess+=c
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` for navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
" autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
" vmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
vmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` for format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` for fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Shortcuts for denite interface
" Show extension list
" nnoremap <silent> <space>e  :<C-u>Denite coc-extension<cr>
" Show symbols of current buffer
" nnoremap <silent> <space>o  :<C-u>Denite coc-symbols<cr>
" Search symbols of current workspace
" nnoremap <silent> <space>t  :<C-u>Denite coc-workspace<cr>
" Show diagnostics of current workspace
" nnoremap <silent> <space>a  :<C-u>Denite coc-diagnostic<cr>
" Show available commands
" nnoremap <silent> <space>c  :<C-u>Denite coc-command<cr>
" Show available services
" nnoremap <silent> <space>s  :<C-u>Denite coc-service<cr>
" Show links of current buffer
" nnoremap <silent> <space>l  :<C-u>Denite coc-link<cr>
'''

###########
### LSP ###
###########

# [[plugins]]
# repo = 'autozimu/LanguageClient-neovim'
# depends = ['deoplete.nvim']
# on_ft = ['sh', 'go', 'bash', 'vue', 'typescript', 'javascript', 'javascript.jsx', 'ruby']
# rev = 'next'
# build = '''
# bash install.sh
# chmod +x bin/languageclient
# '''
# hook_add = '''
# set hidden
#
# let g:LanguageClient_rootMarkers = {
#         \ 'go': ['.git', 'go.mod'],
#         \ }
#
# let g:LanguageClient_windowLogMessageLevel = 'Error'
# "  ALEでコントロールする
# let g:LanguageClient_diagnosticsEnable = 0
# let g:LanguageClient_serverCommands = {
#     \ 'typescript':     ['npx', 'javascript-typescript-stdio'],
#     \ 'javascript':     ['npx', 'javascript-typescript-stdio'],
#     \ 'javascript.jsx': ['npx', 'javascript-typescript-stdio'],
#     \ 'go': ['bingo', '--mode', 'stdio', '--pprof', ':6060'],
#     \ 'bash': ['bash-language-server', 'start'],
#     \ 'sh':   ['bash-language-server', 'start'],
#     \ 'css':  ['css-languageserver', '--stdio'],
#     \ 'ruby': ['solargraph', 'stdio'],
#     \ 'vue':  ['vls'],
# "   \ 'php':  ['php', './vendor/bin/php-language-server.php'],
# "   \ 'rust': ['rustup', 'run', 'stable', 'rls'],
#     \ }
#
# function! s:langserver_keymap()
#     nnoremap <buffer><silent> <F10> :LanguageClientStart<CR>
#     nnoremap <buffer><silent> K :call LanguageClient_textDocument_hover()<CR>
#     nnoremap <buffer><silent> gd :call LanguageClient_textDocument_definition()<CR>
#     nnoremap <buffer><silent> <C-]> :call LanguageClient_textDocument_definition()<CR>
#     nnoremap <buffer><silent> <F2> :call LanguageClient_textDocument_rename()<CR>
#     nnoremap <buffer><silent> ge :call LanguageClient_textDocument_references()<CR>
# endfunction
#
# " autocmd FileType php :call s:langserver_keymap()
# " autocmd FileType rust :call s:langserver_keymap()
# autocmd FileType css,sh,go,bash,vue,typescript,javascript,javascript.jsx,ruby :call s:langserver_keymap()
# '''

##########
### GO ###
##########

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_function_arguments = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1

let g:go_echo_command_info = 0
let g:go_def_mapping_enabled = 0
let g:go_gocode_propose_builtins = 0
let g:go_echo_go_info = 0
let g:go_fmt_autosave = 0

let g:go_term_height = 15
let g:go_term_mode = "on | belowright split"
let g:go_term_enabled = 0

function! s:vim_go_keymap()
    nnoremap <buffer><silent> <Leader><C-r> :GoRun<CR>
endfunction

autocmd FileType go :call s:vim_go_keymap()
'''

# [[plugins]]
# repo = 'zchee/deoplete-go'
# depends = ['deoplete.nvim']
# on_ft = ['go']
# build = '''make '''
# hook_add = '''
# let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
# let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
# " let g:deoplete#sources#go#package_dot = 1
# " let g:deoplete#sources#go#pointer = 1
# " let g:deoplete#sources#go#builtin_objects = 1
# " let g:deoplete#sources#go#source_importer = 1
# '''


#############################
### Javascript/TypeScript ###
#############################

[[plugins]]
repo = 'ruanyl/vim-sort-imports'
on_ft = ['javascript', 'typescript']


# jsdoc.vim generates JSDoc block comments based on a function signature.
# [[plugins]]
# repo = 'heavenshell/vim-jsdoc'
# on_ft = ['typescript', 'javascript', 'javascript.jsx']
# hook_add = '''
# let g:typescript_compiler_binary = ''
# let g:typescript_compiler_options = ''
# " autocmd FileType javascript :call s:jsdoc_keymap()
# " autocmd FileType typescript :call s:jsdoc_keymap()
# " function! s:jsdoc_keymap()
# "     inoremap <buffer><silent> <C-P> <Esc>:JsDoc<CR>i
# "     nnoremap <buffer><silent> <C-P> :JsDoc<CR>
# "     vnoremap <buffer><silent> <C-P> :JsDoc<CR>
# " endfunction
# '''

# [[plugins]]
# repo = 'moll/vim-node'
# on_ft = ['javascript']
# hook_add = '''
# autocmd User Node
#   \ if &filetype == "javascript" || &filetype == "javascript" |
#   \   nmap <buffer> <C-w>f <Plug>NodeVSplitGotoFile |
#   \   nmap <buffer> <C-w><C-f> <Plug>NodeVSplitGotoFile |
#   \ endif
# '''

###########
### CSV ###
###########

[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = ['csv']

###########
### PHP ###
###########

[[plugins]]
repo = 'jwalton512/vim-blade'
on_ft = ['blade']
hook_add = '''
" Define some single Blade directives. This variable is used for highlighting only.
let g:blade_custom_directives = ['datetime', 'javascript']

" Define pairs of Blade directives. This variable is used for highlighting and indentation.
let g:blade_custom_directives_pairs = {
      \   'markdown': 'endmarkdown',
      \   'cache': 'endcache',
      \ }
'''

# [[plugins]]
# repo = 'vim-scripts/PDV--phpDocumentor-for-Vim'
# on_ft = ['php']
# hook_add = '''
# " autocmd FileType php :call s:phpdoc_keymap()
# " function! s:phpdoc_keymap()
# "     inoremap <buffer><silent> <C-P> <Esc>:call PhpDocSingle()<CR>i
# "     nnoremap <buffer><silent> <C-P> :call PhpDocSingle()<CR>
# "     vnoremap <buffer><silent> <C-P> :call PhpDocSingle()<CR>
# " endfunction
# '''

# [[plugins]]
# repo = 'lvht/phpcd.vim'
# depends = ['deoplete.nvim']
# on_ft = ['php']
# build = 'composer install'
# hook_add = '''
# let g:phpcd_autoload_path = './vendor/autoload.php'
# let g:deoplete#ignore_sources = get(g:, 'deoplete#ignore_sources', {})
# let g:deoplete#ignore_sources.php = ['omni']
#
# function! s:phpcd_keymap()
#     silent! nnoremap <silent> <unique> <buffer> gd
#         \ :<C-u>call phpcd#JumpToDefinition('normal')<CR>
#     silent! nnoremap <silent> <unique> <buffer> <C-W><C-]>
#         \ :<C-u>call phpcd#JumpToDefinition('split')<CR>
#     silent! nnoremap <silent> <unique> <buffer> <C-W><C-\>
#         \ :<C-u>call phpcd#JumpToDefinition('vsplit')<CR>
#     silent! nnoremap <silent> <unique> <buffer> <C-t>
#         \ :<C-u>call phpcd#JumpBack()<CR>
# endfunction
# autocmd FileType php :call s:phpcd_keymap()
# '''

############
### RUST ###
############
# [[plugins]]
# repo = 'sebastianmarkow/deoplete-rust'
# depends = ['deoplete.nvim']
# on_ft = ['rust']
#
# [[plugins]]
# repo = 'rust-lang/rust.vim'
# on_ft = 'rust'
# hook_source = '''
# let g:rustfmt_autosave = 1
#'''

##############
### Python ###
##############

# [[plugins]]
# repo = 'davidhalter/jedi-vim'
# on_ft = ['python','python3','djangohtml', 'ipynb']
# hook_add = '''
# " jediにvimの設定を任せると'completeopt+=preview'するので 自動設定機能をOFFにし手動で設定を行う
# " let g:jedi#auto_vim_configuration = 0
# " let g:jedi#auto_initialization = 0
# " let g:jedi#smart_auto_mappings = 0
# let g:jedi#completions_enabled = 0
# " 補完の最初の項目が選択された状態だと使いにくいためオフにする
# " let g:jedi#popup_select_first = 0
# " let g:jedi#popup_on_dot = 1
# " let g:jedi#completions_command = '<C-d>'
#
# let g:jedi#documentation_command = 'K'
# let g:jedi#rename_command = '<F2>'
# let g:jedi#goto_command = 'gd'
# let g:jedi#usages_command = '<C-h>'
# '''
#
# [[plugins]]
# repo = 'zchee/deoplete-jedi'
# depends = ['deoplete.nvim']
# on_ft = ['python', 'python3', 'ipynb']
#
# [[plugins]]
# repo = 'jmcantrell/vim-virtualenv'
# on_ft = ['python', 'python3', 'ipynb']

#######################
### HTML / Markdown ###
#######################

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown','mkd']
hook_add = '''
let g:vim_markdown_conceal = 0
let g:vim_markdown_folding_disabled = 1
'''

############
### Ruby ###
############

# [[plugins]]
# repo = 'vim-ruby/vim-ruby'
# on_ft = ['ruby']
#
# [[plugins]]
# repo = 'tpope/vim-rails'
# on_ft = ['ruby']

#############
### Scala ###
#############

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = ['scala']

#############
### C/C++ ###
#############

# [[plugins]]
# repo = 'justmao945/vim-clang'
# on_ft = ['c', 'cpp']
#
# [[plugins]]
# repo = 'zchee/deoplete-clang'
# on_ft = ['c', 'cpp', 'cmake']
# depends = ['deoplete.nvim']
# hook_source = '''
# if has('unix')
#     let g:deoplete#sources#clang#libclang_path = '/usr/lib/llvm-4.0/lib/libclang-4.0.so'
#     let g:deoplete#sources#clang#clang_header = '/usr/lib/llvm-4.0/include/clang'
#     if has('mac')
#         let g:deoplete#sources#clang#libclang_path = '/usr/local/opt/llvm/lib/libclang.so'
#         let g:deoplete#sources#clang#clang_header = '/usr/local/opt/llvm/include/clang'
#     endif
# endif
# '''


