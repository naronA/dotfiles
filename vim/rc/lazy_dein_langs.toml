##########
### GO ###
##########

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_function_arguments = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1

let g:go_echo_command_info = 0
let g:go_def_mapping_enabled = 0
let g:go_gocode_propose_builtins = 0
let g:go_echo_go_info = 0
let g:go_fmt_autosave = 0

let g:go_term_height = 15
let g:go_term_mode = "on | belowright split"
let g:go_term_enabled = 0

function! s:vim_go_keymap()
    nnoremap <buffer><silent> <Leader><C-r> :GoRun<CR>
endfunction

autocmd FileType go :call s:vim_go_keymap()
'''

#############################
### Javascript/TypeScript ###
#############################

[[plugins]]
repo = 'ruanyl/vim-sort-imports'
on_ft = ['javascript', 'typescript']


# jsdoc.vim generates JSDoc block comments based on a function signature.
# [[plugins]]
# repo = 'heavenshell/vim-jsdoc'
# on_ft = ['typescript', 'javascript', 'javascript.jsx']
# hook_add = '''
# let g:typescript_compiler_binary = ''
# let g:typescript_compiler_options = ''
# " autocmd FileType javascript :call s:jsdoc_keymap()
# " autocmd FileType typescript :call s:jsdoc_keymap()
# " function! s:jsdoc_keymap()
# "     inoremap <buffer><silent> <C-P> <Esc>:JsDoc<CR>i
# "     nnoremap <buffer><silent> <C-P> :JsDoc<CR>
# "     vnoremap <buffer><silent> <C-P> :JsDoc<CR>
# " endfunction
# '''

###########
### CSV ###
###########

[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = ['csv']

###########
### PHP ###
###########

[[plugins]]
repo = 'jwalton512/vim-blade'
on_ft = ['blade']
hook_add = '''
" Define some single Blade directives. This variable is used for highlighting only.
let g:blade_custom_directives = ['datetime', 'javascript']

" Define pairs of Blade directives. This variable is used for highlighting and indentation.
let g:blade_custom_directives_pairs = {
      \   'markdown': 'endmarkdown',
      \   'cache': 'endcache',
      \ }
'''

# [[plugins]]
# repo = 'vim-scripts/PDV--phpDocumentor-for-Vim'
# on_ft = ['php']
# hook_add = '''
# " autocmd FileType php :call s:phpdoc_keymap()
# " function! s:phpdoc_keymap()
# "     inoremap <buffer><silent> <C-P> <Esc>:call PhpDocSingle()<CR>i
# "     nnoremap <buffer><silent> <C-P> :call PhpDocSingle()<CR>
# "     vnoremap <buffer><silent> <C-P> :call PhpDocSingle()<CR>
# " endfunction
# '''

# [[plugins]]
# repo = 'lvht/phpcd.vim'
# depends = ['deoplete.nvim']
# on_ft = ['php']
# build = 'composer install'
# hook_add = '''
# let g:phpcd_autoload_path = './vendor/autoload.php'
# let g:deoplete#ignore_sources = get(g:, 'deoplete#ignore_sources', {})
# let g:deoplete#ignore_sources.php = ['omni']
#
# function! s:phpcd_keymap()
#     silent! nnoremap <silent> <unique> <buffer> gd
#         \ :<C-u>call phpcd#JumpToDefinition('normal')<CR>
#     silent! nnoremap <silent> <unique> <buffer> <C-W><C-]>
#         \ :<C-u>call phpcd#JumpToDefinition('split')<CR>
#     silent! nnoremap <silent> <unique> <buffer> <C-W><C-\>
#         \ :<C-u>call phpcd#JumpToDefinition('vsplit')<CR>
#     silent! nnoremap <silent> <unique> <buffer> <C-t>
#         \ :<C-u>call phpcd#JumpBack()<CR>
# endfunction
# autocmd FileType php :call s:phpcd_keymap()
# '''

############
### RUST ###
############
# [[plugins]]
# repo = 'sebastianmarkow/deoplete-rust'
# depends = ['deoplete.nvim']
# on_ft = ['rust']
#
# [[plugins]]
# repo = 'rust-lang/rust.vim'
# on_ft = 'rust'
# hook_source = '''
# let g:rustfmt_autosave = 1
#'''

#######################
### HTML / Markdown ###
#######################

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown','mkd']
hook_add = '''
let g:vim_markdown_conceal = 0
let g:vim_markdown_folding_disabled = 1
'''

############
### Ruby ###
############

# [[plugins]]
# repo = 'vim-ruby/vim-ruby'
# on_ft = ['ruby']
#
# [[plugins]]
# repo = 'tpope/vim-rails'
# on_ft = ['ruby']

#############
### Scala ###
#############

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = ['scala']

#############
### C/C++ ###
#############

# [[plugins]]
# repo = 'justmao945/vim-clang'
# on_ft = ['c', 'cpp']
#
# [[plugins]]
# repo = 'zchee/deoplete-clang'
# on_ft = ['c', 'cpp', 'cmake']
# depends = ['deoplete.nvim']
# hook_source = '''
# if has('unix')
#     let g:deoplete#sources#clang#libclang_path = '/usr/lib/llvm-4.0/lib/libclang-4.0.so'
#     let g:deoplete#sources#clang#clang_header = '/usr/lib/llvm-4.0/include/clang'
#     if has('mac')
#         let g:deoplete#sources#clang#libclang_path = '/usr/local/opt/llvm/lib/libclang.so'
#         let g:deoplete#sources#clang#clang_header = '/usr/local/opt/llvm/include/clang'
#     endif
# endif
# '''


###############
### Jupyter ###
###############

[[plugins]]
repo = 'szymonmaszke/vimpyter'
on_ft = ['ipynb']
hook_add = '''
autocmd Filetype ipynb nmap <silent><C-s>b :VimpyterInsertPythonBlock<CR>
autocmd Filetype ipynb nmap <silent><C-s>j :VimpyterStartJupyter<CR>
autocmd Filetype ipynb nmap <silent><C-s>n :VimpyterStartNteract<CR>
'''

