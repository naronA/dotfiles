set encoding=utf-8
scriptencoding utf-8
set completeopt+=noselect
" set virtualedit=block
"
""""" [検索系]
set ignorecase                  " 大文字小文字を区別しない
set smartcase                   " 検索文字に大文字がある場合は大文字小文字を区別
set incsearch                   " インクリメンタルサーチ
set hlsearch                    " 検索マッチテキストをハイライト

""""" [編集系]
set hidden                      " バッファを閉じる代わりに隠す（Undo履歴を残すため）
set switchbuf=useopen           " 新しく開く代わりにすでに開いてあるバッファを開く
set showmatch                   " 対応する括弧などをハイライト表示する
set matchtime=2                 " 対応括弧のハイライト表示を3秒にする
set nowritebackup               " Backupを無効化
set nobackup                    " Backupを無効化
set noswapfile                  " swapを無効化
set backspace=0
" set backspace=indent,eol,start  " バックスペースでなんでも消せるようにする

set clipboard+=unnamedplus
set cmdheight=2
set updatetime=300
set shortmess+=c
set signcolumn=yes

""""" [表示系]
set number                      " 行番号の表示
set nowrap                      " 長いテキストの折り返し
set textwidth=0                 " 自動的に改行が入るのを無効化
" set colorcolumn=80,120              " その代わり80文字目にラインを入れる
set t_vb=
set novisualbell                " 前時代的スクリーンベルを無効化
set display=lastline

set softtabstop=0
set showtabline=2               " 常にタブラインを表示
set laststatus=2
set whichwrap=b,s,<,>,[,]       " wrapするカッコ一覧
set list                        " 不可視文字の可視化
set listchars=tab:\|\ ,trail:￭,extends:❯,precedes:❮ ",nbsp:%,eol:￭¬↲ "不可視文字をUnicodeにする
set ttimeout
set ttimeoutlen=10
set scrolloff=5                 " 3行残して画面スクロールする
set shell=zsh
" set cursorline

set ambiwidth=double
set termguicolors

" set iminsert=0
" set imsearch=0
" set lazyredraw
let mapleader = "\<Space>"

"---------------------------------------------------------------------------"
" Commands \ Modes | Normal | Insert | Command | Visual | Select | Operator |
"------------------|--------|--------|---------|--------|--------|----------|
" map  / noremap   |    @   |   -    |    -    |   @    |   @    |    @     |
" nmap / nnoremap  |    @   |   -    |    -    |   -    |   -    |    -     |
" vmap / vnoremap  |    -   |   -    |    -    |   @    |   @    |    -     |
" omap / onoremap  |    -   |   -    |    -    |   -    |   -    |    @     |
" xmap / xnoremap  |    -   |   -    |    -    |   @    |   -    |    -     |
" smap / snoremap  |    -   |   -    |    -    |   -    |   @    |    -     |
" map! / noremap!  |    -   |   @    |    @    |   -    |   -    |    -     |
" imap / inoremap  |    -   |   @    |    -    |   -    |   -    |    -     |
" cmap / cnoremap  |    -   |   -    |    @    |   -    |   -    |    -     |
"---------------------------------------------------------------------------"
"
""""" key remap
nnoremap <silent> <ESC><ESC> :noh<CR>
nnoremap <silent> <M-p> :bp<CR>
nnoremap <silent> <M-n> :bn<CR>
nnoremap <silent> <M-d> :bd<CR>
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>

" バックスラッシュやクエスチョンを状況に合わせ自動的にエスケープ
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'
cnoremap <expr> ? getcmdtype() == '?' ? '\?' : '?'

" vim strict mode
vnoremap  <C-c>    <nop>
vnoremap  <Up>     <nop>
vnoremap  <Down>   <nop>
vnoremap  <Left>   <nop>
vnoremap  <Right>  <nop>
inoremap  <C-c>    <nop>
inoremap  <Up>     <nop>
inoremap  <Down>   <nop>
inoremap  <Left>   <nop>
inoremap  <Right>  <nop>
" inoremap  <BS>     <nop>
noremap   <C-c>    <nop>
noremap   <Up>     <nop>
noremap   <Down>   <nop>
noremap   <Left>   <nop>
noremap   <Right>  <nop>
"noremap   h <nop>
"noremap   l <nop>
tnoremap <C-j><C-j> <C-\><C-n>

inoremap  <C-l> <DEL>
nnoremap  <C-k> {
nnoremap  <C-j> }
""""" command """""
" よく押し間違えるので
command! Q :q
command! W :w
command! Wq :wq
command! WQ :wq

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    augroup plug
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    augroup END
endif

try
    call plug#begin('~/.vim/plugged')

    Plug 'Shougo/vimproc', {'do': 'make'}

    Plug 'terryma/vim-multiple-cursors'

    Plug 'osyo-manga/vim-over'
    nnoremap <silent> <Leader>o :OverCommandLine<CR>

    Plug 'terryma/vim-expand-region'
    vmap v <Plug>(expand_region_expand)
    vmap <C-v> <Plug>(expand_region_shrink)

    Plug 'w0rp/ale'
    nmap <silent> <Leader>/ :ALEFix<CR>
    nmap <silent> <leader>jj :ALENext<CR>
    nmap <silent> <leader>kk :ALEPrevious<CR>

    let g:ale_linters = {
                \   'javascript': ['eslint'],
                \   'javascript.jsx': ['eslint'],
                \   'php': ['phpcs', 'phpstan', 'php', 'langserver'],
                \   'go': ['govet', 'golangci-lint'],
                \   'python': ['pycodestyle',  'pylint', 'mypy', 'flake8', 'isort'],
                \   'ruby': ['ruby'],
                \   'typescript': ['eslint', 'tsserver'],
                \   'vue': ['eslint', 'vls'],
                \   'zsh': ['shellcheck'],
                \   'vim': ['vint'],
                \   'yaml': ['prettier'],
                \}

    let g:ale_fixers = {
                \ 'bash': ['shfmt'],
                \ 'go': ['gofmt', 'goimports'],
                \ 'javascript': ['eslint'],
                \ 'javascript.jsx': ['eslint'],
                \ 'json': ['prettier'],
                \ 'php': ['php_cs_fixer', 'phpcbf'],
                \ 'python': ['autopep8', 'yapf', 'isort'],
                \ 'sh': ['shfmt'],
                \ 'typescript': ['eslint'],
                \ 'vue': ['eslint'],
                \ 'yaml': ['prettier'],
                \ }

    let g:ale_sign_error = 'E*'       " エラー行に表示するマーク
    let g:ale_sign_warning = 'W*'     " エラー行に表示するマーク

    let g:ale_set_highlights = 1
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]' " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
    let g:ale_sign_column_always = 1 " エラー表示の列を常時表示
    let g:ale_completion_enabled = 0
    let g:ale_virtualtext_cursor = 1

    let g:ale_disable_lsp = 1
    let g:ale_lint_on_enter = 1      " ファイルを開いたときにlint実行
    let g:ale_lint_on_save = 1       " ファイルを保存したときにlint実行
    let g:ale_fix_on_save = 0        " ファイルを保存したときにfix実行
    let g:ale_lint_delay = 50
    let g:ale_lint_on_text_changed = 'never' " always or never

    " lint結果をロケーションリストとQuickFixには表示しない。QuickFixを書き換えられるのは困る
    let g:ale_set_loclist = 0
    let g:ale_set_quickfix = 0
    let g:ale_open_list = 0
    let g:ale_keep_list_window_open = 0
    let g:ale_javascript_eslint_options = '--cache'
    let g:ale_javascript_eslint_suppress_eslintignore = 1
    let g:ale_python_mypy_options='--ignore-missing-imports --follow-imports=silent --show-column-numbers'
    let g:ale_php_phpcs_use_global = 1
    " let g:ale_php_phpcs_standard = 'PSR12'
    " let g:ale_php_cs_fixer_options = '--rules=@PSR2'
    " let g:ale_php_phpcs_executable = './vendor/bin/phpcs'
    " let g:ale_php_phpstan_executable = './vendor/bin/phpstan'
    let g:ale_php_phpstan_level = 5
    let g:ale_php_phan_minimum_severity = 0
    let g:ale_go_golangci_lint_options = '
                \ --enable-all
                \ -D=typecheck
                \ -D=dupl
                \ -D=gochecknoglobals
                \ -D=deadcode
                \ -D=unused
                \ -D=lll
                \ -D=prealloc
                \'

    " Syntax Highlight
    Plug 'sheerun/vim-polyglot'

    " Plug 'jelera/vim-javascript-syntax'
    " Plug 'othree/yajs.vim'

    Plug 'deris/vim-shot-f'

    Plug 'andymass/vim-matchup'

    Plug 'machakann/vim-highlightedyank'

    Plug 'simeji/winresizer'
    let g:winresizer_vert_resize = 1
    let g:winresizer_horiz_resize = 1

    Plug 'editorconfig/editorconfig-vim'

    Plug 'Yggdroot/indentLine'
    let g:indentLine_showFirstIndentLevel = 1
    let g:indentLine_bufNameExclude = ['_.*', 'NERD_tree.*', '_defx.*']
    let g:indentLine_bufTypeExluce = ['help', 'nerdtree', 'defx', 'terminal']
    let g:indentLine_fileTypeExluce = ['help', 'nerdtree', 'defx']
    let g:indentLine_color_term = 238
    let g:indentLine_color_gui = '#676767'

    Plug 'dbakker/vim-projectroot'
    function! <SID>AutoProjectRootCD()
        try
            if &filetype !=? 'help'
                ProjectRootCD
            endif
        catch
            " Silently ignore invalid buffers
        endtry
    endfunction
    augroup mygroup
        autocmd BufEnter * call <SID>AutoProjectRootCD()
    augroup END

    " " http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
    Plug 'godlygeek/tabular'

    " Filer
    Plug 'scrooloose/nerdtree'
    nmap <F9> :NERDTreeToggle<CR>
    nmap <silent><Leader>n :NERDTreeToggle<CR>
    nmap <silent><Leader>h :NERDTreeFind<CR>
    let g:NERDTreeWinSize = 35
    let g:NERDTreeLimitedSyntax = 1
    augroup nerdtree_hook_add
        autocmd FileType nerdtree nmap <buffer> l o
        autocmd FileType nerdtree nmap <buffer> <C-0> o
        autocmd FileType nerdtree nmap <buffer> <C-n> j
        autocmd FileType nerdtree nmap <buffer> <C-p> k
    augroup END

    Plug 'hzchirs/vim-material'
    let g:material_style='palenight'

    Plug 'dracula/vim'

    Plug 'rhysd/vim-color-spring-night'
    let g:spring_night_kill_italic = 1

    Plug 'luochen1990/rainbow'
    let g:rainbow_active = 0
    let g:rainbow_conf = {
                \   'guifgs': ['darkorange2', 'orchid3', 'seagreen3'],
                \   'separately': {
                \       'nerdtree': 0,
                \   },
                \ }

    Plug 'andymass/vim-matchup'
    let g:loaded_matchit = 1

    Plug 'junegunn/vim-easy-align'
    nmap ga <Plug>(EasyAlign)
    xmap ga <Plug>(EasyAlign)

    Plug 'thinca/vim-quickrun', {'for': ['python', 'ruby', 'javascript', 'javascript.jsx', 'typescript']}
    let g:quickrun_config = {
                \     '_' : {
                \         'runner' : 'vimproc',
                \         'runner/vimproc/updatetime' : 40,
                \         'outputter' : 'error',
                \         'outputter/error/success' : 'buffer',
                \         'outputter/error/error'   : 'quickfix',
                \         'outputter/buffer/split' : ':botright 12sp',
                \     }
                \ }

    " 実行時に前回の表示内容をクローズ&保存してから実行
    let g:quickrun_no_default_key_mappings = 1
    " "nmap <Leader><C-r> :cclose<CR>:write<CR>:QuickRun -mode n<CR>
    nmap <Leader><C-r> :QuickRun -mode n<CR>

    Plug 'Shougo/neosnippet-snippets'
    Plug 'Shougo/neosnippet.vim'
    " Plugin key-mappings.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    imap <expr><TAB>
                \ pumvisible() ? "\<C-n>" :
                \ neosnippet#expandable_or_jumpable() ?
                \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    imap <expr><CR>
                \ (pumvisible() && neosnippet#expandable()) ? "\<Plug>(neosnippet_expand_or_jump)" : "\<CR>"


    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
                \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    " For conceal markers.
    "if has('conceal')
    "  set conceallevel=2 concealcursor=niv
    "endif

    Plug 'Shougo/neomru.vim'

    Plug 'mattn/emmet-vim'

    Plug 'tpope/vim-surround'

    Plug 'fatih/vim-go', {'for': 'go'}

    Plug 'ruanyl/vim-sort-imports', {'for' : ['javascript', 'typescript']}

    Plug 'heavenshell/vim-jsdoc', {'for' : ['javascript', 'typescript', 'javascript.jsx']}
    let g:typescript_compiler_binary = ''
    let g:typescript_compiler_options = ''
    augroup mygroup
        autocmd FileType javascript,typescript :call s:jsdoc_keymap()
    augroup END
    function! s:jsdoc_keymap()
        nnoremap <buffer><silent> <Leader>d :JsDoc<CR>
        vnoremap <buffer><silent> <Leader>d :JsDoc<CR>
    endfunction

    Plug 'mechatroner/rainbow_csv', {'for': 'csv'}

    Plug 'jwalton512/vim-blade', {'for': 'blade'}
    " Define some single Blade directives. This variable is used for highlighting only.
    let g:blade_custom_directives = ['datetime', 'javascript']

    " Define pairs of Blade directives. This variable is used for highlighting and indentation.
    let g:blade_custom_directives_pairs = {
                \   'markdown': 'endmarkdown',
                \   'cache': 'endcache',
                \ }

    Plug 'tobyS/vmustache'

    Plug 'tobyS/pdv', {'for': 'php'}
    let g:pdv_template_dir = $HOME .'/.cache/dein/repos/github.com/tobyS/pdv/templates'
    augroup mygroup
        autocmd FileType php :call s:phpdoc_keymap()
    augroup END
    function! s:phpdoc_keymap()
        nnoremap <buffer><silent> <Leader>d :call pdv#DocumentCurrentLine()<CR>
        vnoremap <buffer><silent> <Leader>d :call pdv#DocumentCurrentLine()<CR>
    endfunction

    Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
    let g:vim_markdown_conceal = 0
    let g:vim_markdown_folding_disabled = 1

    Plug 'liuchengxu/vista.vim'
    let g:pdv_template_dir = $HOME .'/.cache/dein/repos/github.com/tobyS/pdv/templates'
    augroup mygroup
        autocmd FileType php :call s:phpdoc_keymap()
    augroup END
    function! s:phpdoc_keymap()
        nnoremap <buffer><silent> <Leader>d :call pdv#DocumentCurrentLine()<CR>
        vnoremap <buffer><silent> <Leader>d :call pdv#DocumentCurrentLine()<CR>
    endfunction

    Plug 'prabirshrestha/asyncomplete.vim'
    Plug 'prabirshrestha/async.vim'
    Plug 'prabirshrestha/vim-lsp'
    Plug 'prabirshrestha/asyncomplete-lsp.vim'
    call plug#end()
catch
endtry


if executable('pyls')
    " pip install python-language-server
    augroup lsp
        au User lsp_setup call lsp#register_server({
                    \ 'name': 'pyls',
                    \ 'cmd': {server_info->['pyls']},
                    \ 'whitelist': ['python'],
                    \ })
    augroup END
endif

if executable('typescript-language-server')
    " npm install -g typescript typescript-language-server
    augroup lsp
        au User lsp_setup call lsp#register_server({
                    \ 'name': 'typescript-language-server',
                    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
                    \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
                    \ 'whitelist': ['typescript'],
                    \ })
    augroup END
endif

if executable('gopls')
    augroup lsp
        au User lsp_setup call lsp#register_server({
                    \ 'name': 'gopls',
                    \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
                    \ 'whitelist': ['go'],
                    \ })
        autocmd BufWritePre *.go LspDocumentFormatSync
    augroup END
endif

if executable('docker-langserver')
    augroup lsp
        au User lsp_setup call lsp#register_server({
                    \ 'name': 'docker-langserver',
                    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'docker-langserver --stdio']},
                    \ 'whitelist': ['dockerfile'],
                    \ })
    augroup END
endif

augroup lsp
    au User lsp_setup call lsp#register_server({
                \ 'name': 'intelephense',
                \ 'cmd': {server_info->['node', expand('PATH_TO_GLOBAL_NODE_MODULES/intelephense/lib/intelephense.js'), '--stdio']},
                \ 'initialization_options': {"storagePath": "PATH_TO_TEMP_FOLDER/intelephense"},
                \ 'whitelist': ['php'],
                \ })
augroup END

if executable('css-languageserver')
    " npm install -g vscode-css-languageserver-bin
    augroup lsp
        au User lsp_setup call lsp#register_server({
                \ 'name': 'css-languageserver',
                \ 'cmd': {server_info->[&shell, &shellcmdflag, 'css-languageserver --stdio']},
                \ 'whitelist': ['css', 'less', 'sass'],
                \ })
    augroup END
endif

augroup autoreload
    set autoread
    autocmd FocusLost,FocusGained,CursorMoved,CursorMovedI,CursorHold,CursorHoldI  * silent! checktime
augroup END

augroup filetypes
    autocmd BufRead,BufNewFile Dockerfile* setfiletype dockerfile
    autocmd BufRead,BufNewFile *php_cs* setfiletype php
    autocmd BufRead,BufNewFile *zshrc setfiletype sh
    autocmd BufRead,BufNewFile *.mjs setfiletype javascript
    autocmd BufRead,BufNewFile *.csv setfiletype csv
    autocmd BufWritePre * :%s/\s\+$//ge
augroup END

set expandtab                   " タブをスペースにする
set tabstop=2
set shiftwidth=2
set conceallevel=2
set concealcursor=nc
augroup indentsize
    autocmd FileType sh setlocal shiftwidth=2 tabstop=2
    autocmd FileType vue setlocal shiftwidth=2 tabstop=2
    autocmd FileType blade setlocal shiftwidth=2 tabstop=2
    autocmd FileType yaml setlocal shiftwidth=2 tabstop=2
    autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
    autocmd FileType typescript setlocal shiftwidth=2 tabstop=2
    autocmd FileType json setlocal shiftwidth=2 tabstop=2 conceallevel=0
    autocmd FileType html setlocal shiftwidth=2 tabstop=2
    autocmd FileType go setlocal shiftwidth=4 tabstop=4 noexpandtab
    autocmd FileType vim setlocal shiftwidth=4 tabstop=4
    autocmd FileType python setlocal shiftwidth=4 tabstop=4
    autocmd FileType makefile setlocal noexpandtab
    autocmd FileType gitconfig setlocal noexpandtab
    autocmd FileType vue :syntax sync fromstart
augroup END

" colorscheme dracula
" colorscheme spring-night
set background=dark
try
    colorscheme vim-material
catch
endtry

hi! clear LineNr
hi! clear SignColumn
hi! NormalFloat term=NONE guifg=#fffeeb ctermfg=230 guibg=#334455 ctermbg=235
hi! CursorLine guibg=NONE guifg=NONE ctermfg=NONE ctermbg=NONE cterm=underline gui=underline
hi! ALEWarning guibg=NONE guifg=NONE gui=underline ctermbg=NONE ctermfg=NONE cterm=underline
hi! ALEError guibg=NONE guifg=NONE gui=underline ctermbg=NONE  ctermfg=NONE cterm=underline
hi! ALEErrorSign ctermbg=207 ctermfg=NONE guibg=#FF5555 guifg=#fffeeb
hi! ALEWarningSign ctermbg=119 ctermfg=NONE guibg=#11AF33 guifg=#fffeeb
hi! CursorIM ctermfg=16 ctermbg=127 guifg=#000000 guibg=#af00af
hi! HighlightedyankRegion cterm=reverse gui=reverse

function! PhpSyntaxOverride()
    syn match phpPropExt "@\%(property-read\|property-write\)" containedin=phpDocComment nextgroup=phpDocParam,phpDocIdentifier skipwhite contained
    hi! link phpDocTags phpPropExt
    hi! link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
    autocmd!
    autocmd FileType php call PhpSyntaxOverride()
augroup END
