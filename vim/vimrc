set encoding=utf-8
scriptencoding utf-8
" release autogroup in MyAutoCmd
" augroup MyAutoCmd
"  autocmd!
" augroup END

""""" [検索系]
set ignorecase                  " 大文字小文字を区別しない
set smartcase                   " 検索文字に大文字がある場合は大文字小文字を区別
set incsearch                   " インクリメンタルサーチ
set hlsearch                    " 検索マッチテキストをハイライト

""""" [編集系]
set hidden                      " バッファを閉じる代わりに隠す（Undo履歴を残すため）
set switchbuf=useopen           " 新しく開く代わりにすでに開いてあるバッファを開く
set showmatch                   " 対応する括弧などをハイライト表示する
set matchtime=3                 " 対応括弧のハイライト表示を3秒にする
set nowritebackup               " Backupを無効化
set nobackup                    " Backupを無効化
set noswapfile                  " swapを無効化
set backspace=0
" set backspace=indent,eol,start  " バックスペースでなんでも消せるようにする
" set clipboard=unnamed
set clipboard+=unnamedplus
""""" [表示系]
set number                      " 行番号の表示
set nowrap                      " 長いテキストの折り返し
set textwidth=0                 " 自動的に改行が入るのを無効化
set colorcolumn=80              " その代わり80文字目にラインを入れる
set t_vb=
set novisualbell                " 前時代的スクリーンベルを無効化

set ambiwidth=double
set softtabstop=0
set showtabline=2               " 常にタブラインを表示
set laststatus=2
set whichwrap=b,s,<,>,[,]       " wrapするカッコ一覧
set list                        " 不可視文字の可視化
set listchars=tab:▸\ ,trail:-,eol:¬,extends:❯,precedes:❮ ",nbsp:%,eol:↲ "不可視文字をUnicodeにする
set ttimeout
set ttimeoutlen=10
set scrolloff=5                 " 3行残して画面スクロールする
set shell=zsh
set expandtab                   " タブをスペースにする
" set lazyredraw
" set noimdisable
" set iminsert=0
" set imsearch=0

augroup autoreload
    set autoread
    autocmd FocusLost,FocusGained,CursorMoved,CursorMovedI,CursorHold,CursorHoldI  * silent! checktime
augroup END

augroup filetypes
    autocmd BufRead,BufNewFile *zshrc setfiletype sh
    autocmd BufRead,BufNewFile *.mjs setfiletype javascript
augroup END

augroup indentsize
    set tabstop=4
    set shiftwidth=4
    autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
    autocmd FileType typescript setlocal shiftwidth=2 tabstop=2
    autocmd FileType json setlocal shiftwidth=2 tabstop=2
    autocmd FileType html setlocal shiftwidth=2 tabstop=2
    autocmd FileType makefile setlocal noexpandtab
    autocmd FileType gitconfig setlocal noexpandtab
augroup END


if ! has('nvim')
" OptionキーをMetaキーとして使う。
    let s:c = 'a'
    while s:c <=# 'z'
        execute 'set <M-' . s:c . '>=\e' . s:c
        execute 'imap \e' . s:c . ' <M-' . s:c . '>'
        execute 'set <M-S-' . s:c . '>=\e' . toupper(s:c)
        execute 'imap \e' . toupper(s:c) . ' <M-' . s:c . '>'
        let s:c = nr2char(1+char2nr(s:c))
    endw
endif
""""" key remap
nnoremap <silent> <ESC><ESC> :noh<CR>
nnoremap <silent> <M-p> :bp<CR>
nnoremap <silent> <M-n> :bn<CR>
nnoremap <silent> <M-d> :bd<CR>
" バックスラッシュやクエスチョンを状況に合わせ自動的にエスケープ
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'
cnoremap <expr> ? getcmdtype() == '?' ? '\?' : '?'

" vim strict mode
vnoremap  <C-c>    <nop>
vnoremap  <Up>     <nop>
vnoremap  <Down>   <nop>
vnoremap  <Left>   <nop>
vnoremap  <Right>  <nop>
inoremap  <C-c>    <nop>
inoremap  <Up>     <nop>
inoremap  <Down>   <nop>
inoremap  <Left>   <nop>
inoremap  <Right>  <nop>
inoremap  <BS>     <nop>
noremap   <C-c>    <nop>
noremap   <Up>     <nop>
noremap   <Down>   <nop>
noremap   <Left>   <nop>
noremap   <Right>  <nop>
"noremap   h <nop>
"noremap   l <nop>
tnoremap <C-j><C-j> <C-\><C-n>

""""" command """""
command! W :w " よく押し間違えるので

if has('gui_vimr')
    set termguicolors
endif

""""" MacVimのMetaキー有効化
if has('gui_macvim')
    set macmeta " enables option as meta key in macvim. Needed for auto-pairs mappings <M-e> etc.

    if has('mac')
        set guifont=Cica:h16
    endif
endif

""""" gui font  """""
if has('gui_running')
    if has('unix')
        set guifont=Cica\ 16
    endif
endif

"""""" dein (load plugins)"""""
let s:dein_dir = expand('~/.cache/dein')
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

" dein.vim がなければ github から落としてくる
if &runtimepath !~# '/dein.vim'
    if !isdirectory(s:dein_repo_dir)
        execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
    endif
    execute 'set runtimepath^=' . fnamemodify(s:dein_repo_dir, ':p')
endif

" もし設定のキャッシュファイルを読み込めなかったら
" tomlファイルを再読み込みする
if dein#load_state(s:dein_dir)
    call dein#begin(s:dein_dir) " 設定開始

    " プラグインリストを収めた TOML ファイル
    " 予め TOML ファイル（後述）を用意しておく
    let g:rc_dir = expand('~/.vim/rc')
    let s:toml = g:rc_dir . '/dein.toml'
    let s:lazy_toml = g:rc_dir . '/lazy_dein.toml'

    " TOML を読み込み、キャッシュしておく
    call dein#load_toml(s:toml,      {'lazy': 0})
    call dein#load_toml(s:lazy_toml, {'lazy': 1})

    call dein#end() " 設定終了
    call dein#save_state() " キャッシュ保存
endif

" もし、未インストールものものがあったらインストール
if dein#check_install()
    call dein#install()
endif

if has('nvim')
    let g:python_host_prog=glob($PYENV_ROOT.'/versions/2.7*/bin/python')
    let g:python3_host_prog=glob($PYENV_ROOT.'/versions/3*/bin/python')
endif
syntax on
color dracula
"color nova 
hi IndentGuidesOdd  ctermbg=236
hi IndentGuidesEven ctermbg=234
hi ALEWarning guibg=green ctermbg=green ctermfg=white cterm=underline
hi ALEError guibg=red ctermbg=red ctermfg=white cterm=underline
" ファイルタイププラグインおよびインデントを有効化
filetype plugin indent on
