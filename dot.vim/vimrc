if &compatible
  set nocompatible               " Be iMproved
endif

" release autogroup in MyAutoCmd
" augroup MyAutoCmd
"  autocmd!
" augroup END

""""" [検索系]
set ignorecase                  " 大文字小文字を区別しない
set smartcase                   " 検索文字に大文字がある場合は大文字小文字を区別
set incsearch                   " インクリメンタルサーチ
set hlsearch                    " 検索マッチテキストをハイライト

""""" [編集系]
set hidden                      " バッファを閉じる代わりに隠す（Undo履歴を残すため）
set switchbuf=useopen           " 新しく開く代わりにすでに開いてあるバッファを開く
set showmatch                   " 対応する括弧などをハイライト表示する
set matchtime=3                 " 対応括弧のハイライト表示を3秒にする
set nowritebackup               " Backupを無効化
set nobackup                    " Backupを無効化
set noswapfile                  " swapを無効化
set backspace=indent,eol,start  " バックスペースでなんでも消せるようにする
set clipboard=unnamed

""""" [表示系]
set list                        " 不可視文字の可視化
set number                      " 行番号の表示
set wrap                        " 長いテキストの折り返し
set textwidth=0                 " 自動的に改行が入るのを無効化
set colorcolumn=80              " その代わり80文字目にラインを入れる
set t_vb=
set novisualbell                " 前時代的スクリーンベルを無効化
set expandtab                   " タブをスペースにする

set encoding=utf-8
set ambiwidth=double
" set noexpandtab               " タブをタブとして扱う(スペースに展開しない)
set tabstop=4                   " タブを表示するときの幅
set shiftwidth=4                " タブを挿入するときの幅
set softtabstop=0
set showtabline=2               " 常にタブラインを表示
"set t_Co=256
set termguicolors
set laststatus=2
set whichwrap=b,s,<,>,[,]       " wrapするカッコ一覧
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮ ",nbsp:%,eol:↲ "不可視文字をUnicodeにする
""""" MacVimのMetaキー有効化
if has("gui_macvim")
    set macmeta " enables option as meta key in macvim. Needed for auto-pairs mappings <M-e> etc.
endif

if ! has("nvim")
" OptionキーをMetaキーとして使う。
    let c = 'a'
    while c <= 'z'
        execute "set <M-" . c . ">=\e" . c
        execute "imap \e" . c . " <M-" . c . ">"
        execute "set <M-S-" . c . ">=\e" . toupper(c)
        execute "imap \e" . toupper(c) . " <M-" . c . ">"
        let c = nr2char(1+char2nr(c))
    endw
endif
""""" key remap
imap <silent> <C-c> <ESC>
nmap <silent> <C-c> <ESC>
nnoremap <silent> <ESC><ESC> :noh<CR>
nnoremap <silent> <M-p> :bp<CR>
nnoremap <silent> <M-n> :bn<CR>
nnoremap <silent> <M-d> :bd<CR>
" バックスラッシュやクエスチョンを状況に合わせ自動的にエスケープ
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'
cnoremap <expr> ? getcmdtype() == '?' ? '\?' : '?'

noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
""""" gui font  """""
if has('unix')
    set guifont=Cica\ 16
endif
if has('mac') 
    set guifont=Cica:h16
endif

"""""" dein (load plugins)"""""
let s:dein_dir = expand('~/.cache/dein')
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

" dein.vim がなければ github から落としてくる
if &runtimepath !~# '/dein.vim'
    if !isdirectory(s:dein_repo_dir)
        execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
    endif
    execute 'set runtimepath^=' . fnamemodify(s:dein_repo_dir, ':p')
endif

" もし設定のキャッシュファイルを読み込めなかったら
" tomlファイルを再読み込みする
if dein#load_state(s:dein_dir)
    call dein#begin(s:dein_dir) " 設定開始

    " プラグインリストを収めた TOML ファイル
    " 予め TOML ファイル（後述）を用意しておく
    let g:rc_dir = expand('~/.vim/rc')
    let s:toml = g:rc_dir . '/dein.toml'
    let s:lazy_toml = g:rc_dir . '/lazy_dein.toml'

    " TOML を読み込み、キャッシュしておく
    call dein#load_toml(s:toml,      {'lazy': 0})
    call dein#load_toml(s:lazy_toml, {'lazy': 1})

    call dein#end() " 設定終了
    call dein#save_state() " キャッシュ保存
endif

" もし、未インストールものものがあったらインストール
if dein#check_install()
    call dein#install()
endif

" ファイルタイププラグインおよびインデントを有効化
filetype plugin indent on
syntax on
" if has('gui_running')
"    color dracula
" endif
colorscheme dracula
color dracula
