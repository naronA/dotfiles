# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh
# export DEFAULT_USER="naronA"

skip_global_compinit=1

ZSH_THEME="dracula"
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
# alias mvim="~/.vim/mvim.sh"

# Uncomment the following line to change how often to auto-update (in days).
export UPDATE_ZSH_DAYS=7

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
#

plugins=(
    git
    fzf-zsh
    zsh-autosuggestions
)
bindkey '^[' autosuggest-accept

. "$HOME/.oh-my-zsh/oh-my-zsh.sh"

# User configuration
# export MANPATH="/usr/local/man:$MANPATH"

#export LANG=ja_JP.UTF-8
#export LANGUAGE=ja
#export LC_CTYPE=ja_JP.UTF-8
#export LC_ALL=ja_JP.UTF-8
export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Compilation flags
export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"
export PYENV_ROOT="$HOME/.anyenv/envs/pyenv"
export PHPENV_ROOT="$HOME/.anyenv/envs/phpenv"
export GTAGSLABEL=pygments
export TERM=xterm-256color
export GOPATH="$HOME/go"
export GOBIN="$HOME/go/bin"

LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
PATH="$HOME/.linuxbrew/bin:$HOME/.linuxbrew/sbin:$PATH"
PATH="/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:$PATH"
PATH="$PATH:$GOBIN"
PATH=/usr/local/cuda-9.0/bin${PATH:+:${PATH}}
PATH="$HOME/.anyenv/bin:$PATH"
PATH="$HOME/.local/bin:$PATH"
PATH="$HOME/.cargo/bin:$PATH"
PATH="/usr/local/opt/sbt@0.13/bin:$PATH"
export GOOGLE_APPLICATION_CREDENTIALS="$HOME/.gcp.json"

if [ "$(uname)" = "Darwin" ]; then
    export ONI_NEOVIM_PATH="/usr/local/bin/nvim"
    # export ONI_NEOVIM_PATH="/usr/local/Cellar/neovim/0.3.1/bin/nvim"
else
    export ONI_NEOVIM_PATH="/home/linuxbrew/.linuxbrew/bin/nvim"
    # export ONI_NEOVIM_PATH="$HOME/neovim/bin/nvim"
fi

if [ "$TMUX" != "" ]; then
  export TERM="screen-256color"
fi

export EDITOR="nvim"
export SHELL=/bin/zsh

pip3_upgrade () {
  pip3 install --upgrade pip && pip3 list --outdated --format columns | awk 'NR>2{print $1}' | xargs pip3 install --upgrade
}

pip2_upgrade () {
  pip2 install --upgrade pip && pip2 list --outdated --format columns | awk 'NR>2{print $1}' | xargs pip2 install --upgrade
}

pipenv_dev () {
  pipenv install --dev neovim ipython flake8 autopep8 pep8 jedi pylint pyflakes isort
}

py_dev () {
  pip3 install pipenv neovim ipython numpy scipy flake8 autopep8 pep8 jedi jupyter pylint pyflakes Pygments isort jupyterthemes jupyter_contrib_nbextensions
  pip2 install neovim
  ## setup jupyter extension dir
  jupyter contrib nbextension install --user
  if [ ! -e "$(jupyter --data-dir)/nbextensions" ]; then
    mkdir -p "$(jupyter --data-dir)/nbextensions"
  fi

  cd "$(jupyter --data-dir)/nbextensions" || exit
  ## jupter vim binding
  if [ ! -e "$(jupyter --data-dir)/nbextensions/vim_binding" ]; then
    git clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding
    jupyter nbextension enable vim_binding/vim_binding
  fi
  ## jupyter autopep8
  jupyter nbextension install https://github.com/kenkoooo/jupyter-autopep8/archive/master.zip --user
  jupyter nbextension enable jupyter-autopep8-master/jupyter-autopep8
  ## change jupyter theme
  jt -t oceans16 -vim
}

php_dev () {
  if ! composer global info | grep -sq laravel/installer; then
    composer global require "laravel/installer"
  fi

  if ! composer global info | grep -sq squizlabs/php_codesniffer; then
    composer global require "squizlabs/php_codesniffer=*"
  fi

  if ! composer global info | grep -sq friendsofphp/php-cs-fixer; then
    composer global require "friendsofphp/php-cs-fixer"
  fi

  if ! composer info | grep -sq felixfbecker/language-server; then
    composer config minimum-stability dev
    composer require --dev felixfbecker/language-server
    composer run-script --working-dir="./vendor/felixfbecker/language-server" parse-stubs
  fi

  if ! composer info | grep -sq phpstan/phpstan; then
    composer require --dev phpstan/phpstan
  fi

  if ! composer info | grep -sq phpunit/phpunit; then
    composer require --dev phpunit/phpunit
  fi
}

go_dev () {
  go get -u github.com/constabulary/gb/...
  go get -u github.com/mdempsky/gocode
  go get -u golang.org/x/lint/golint
  go get -u golang.org/x/tools/cmd/goimports
  go get -u github.com/jstemmer/gotags
  go get -u github.com/aws/aws-sdk-go
  go get -u github.com/aws/aws-lambda-go/lambda
  go get -u github.com/guregu/dynamo
  go get -u github.com/golang/dep/cmd/dep
  go get -u github.com/jinzhu/gorm
}

node_dev () {
  npm install --save-dev javascript-typescript-langserver vscode-json-languageservice ts-node typescript typescript-formatter tslint eslint fixjson
  npm i -g npm-check-updates tern neovim npm yarn
}

js_dev () {
  wget https://gist.githubusercontent.com/tk-minami/5ce6d8b8f3e69298d2bf1cf02142916d/raw/20150db151c7b162636564bcae4d8d3f2ce4f43c/package.json
  wget https://gist.githubusercontent.com/tk-minami/5ce6d8b8f3e69298d2bf1cf02142916d/raw/20150db151c7b162636564bcae4d8d3f2ce4f43c/.eslintrc.json

  yarn add --dev fixjson \
    eslint eslint-config-airbnb eslint-config-google eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react \
    javascript-typescript-langserver vscode-json-languageservice  \
    mocha assert nyc \
    import-sort-cli import-sort-parser-babylon import-sort-style-eslint
}

ts_dev () {
  wget https://gist.githubusercontent.com/tk-minami/5ce6d8b8f3e69298d2bf1cf02142916d/raw/20150db151c7b162636564bcae4d8d3f2ce4f43c/package.json
  wget https://gist.githubusercontent.com/tk-minami/5ce6d8b8f3e69298d2bf1cf02142916d/raw/20150db151c7b162636564bcae4d8d3f2ce4f43c/.eslintrc.json
  wget https://gist.githubusercontent.com/tk-minami/5ce6d8b8f3e69298d2bf1cf02142916d/raw/20150db151c7b162636564bcae4d8d3f2ce4f43c/tsconfig.json
  wget https://gist.githubusercontent.com/tk-minami/5ce6d8b8f3e69298d2bf1cf02142916d/raw/20150db151c7b162636564bcae4d8d3f2ce4f43c/tslint.json

  yarn add --dev typescript @types/node nodemon ts-node \
    tslint tslint-config-airbnb fixjson \
    eslint eslint-config-airbnb eslint-config-google eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react \
    javascript-typescript-langserver vscode-json-languageservice  \
    mocha assert nyc \
    import-sort-cli import-sort-parser-babylon import-sort-style-eslint \
    typescript-formatter

  mkdir .vscode && cd .vscode || exit
  wget https://gist.githubusercontent.com/naronA/4bf7e88eb2ac42fd71119632186f8180/raw/092317eb8fe353d16b2a5f4128a622c8476df9e2/tasks.json
  cd - || exit
}

docker_rmi_none () {
  docker images | grep \<none\> | awk "{print $3}" | xargs docker rmi
}

alias build-neovim='make clean && make CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX=$HOME/neovim" CMAKE_BUILD_TYPE=Release && make install'
alias neovim='~/neovim/bin/nvim'
alias tmux-reload='tmux source-file ~/.tmux.conf'
alias php-parse-stubs='composer run-script --working-dir="./vendor/felixfbecker/language-server" parse-stubs'
alias docker-rm-exited='docker -aq | xargs docker rm'
alias glog='git log --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit --date=relative'
alias glogalga='log --graph --all --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit --date=relative'
alias dus='du --max-depth=1 -h | sort -nr'

npm_freeze() {
  npm list -g --depth=0 | tail +2 | awk '{ print $2 }' | sed -e 's/\@[0-9].*$//g' | tr '\n' ' '
}

if [ "$(uname)" = "Darwin" ]; then
  # Mac OSX
  # export PKG_CONFIG_PATH=/usr/local/Cellar/libffi/3.0.13/lib/pkgconfig
  # export PATH="/usr/local/wine/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin"
  PATH="/usr/local/sbin:$PATH"
  # alias brew="PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin brew"
elif uname -a | grep -sq "Ubuntu"; then
  # Ubuntu
  #export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"
  export VTE_VERSION="100"
  PATH=$HOME/bin:$PATH
elif uname -a | grep -sq "Microsoft"; then
  # Windows Subsystem for Linux
  LS_COLORS=$LS_COLORS:'di=0;36:ow=0;36' ; export LS_COLORS
  zstyle ':completion:*' list-colors 'di=36' 'ow=36'
  PATH=$HOME/bin:$PATH

elif uname -a | grep -sq "Linux"; then
  PATH=$HOME/bin:$PATH
fi

if which anyenv > /dev/null; then
    eval "$(anyenv init - --no-rehash)"
fi

if which hub > /dev/null; then
  eval "$(hub alias -s)"
fi

if which direnv > /dev/null; then
    eval "$(direnv hook zsh)"
fi

export PATH=$PATH
# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[[ -f "$HOME/.npm/_npx/26788/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh" ]] && . "$HOME/.npm/_npx/26788/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh"
# tabtab source for sls package
# uninstall by removing these lines or running `tabtab uninstall sls`
[[ -f "$HOME/.npm/_npx/26788/lib/node_modules/serverless/node_modules/tabtab/.completions/sls.zsh" ]] && . "$HOME/.npm/_npx/26788/lib/node_modules/serverless/node_modules/tabtab/.completions/sls.zsh"

[[ -f "$HOME/.fzf.zsh" ]] && . "$HOME/.fzf.zsh"

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

if [ ! -e "$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions" ]; then
    git clone https://github.com/zsh-users/zsh-autosuggestions "${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions"
fi

export LSCOLORS=gxfxxxxxcxxxxxxxxxgxgx
export LS_COLORS='di=01;36:ln=01;35:ex=01;32'
zstyle ':completion:*' list-colors 'di=36' 'ln=35' 'ex=32'
