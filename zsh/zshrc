# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh
# export DEFAULT_USER="naronA"
# Set name of the theme to load.

# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
# ZSH_THEME="agnoster"
#ZSH_THEME="robbyrussell"
ZSH_THEME="dracula"
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
# alias mvim="~/.vim/mvim.sh"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to disable command auto-correction.
# DISABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true" 
# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git)

. "$HOME/.oh-my-zsh/oh-my-zsh.sh"

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"
#export LANG=ja_JP.UTF-8
#export LANGUAGE=ja
#export LC_CTYPE=ja_JP.UTF-8
#export LC_ALL=ja_JP.UTF-8
export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export PATH="$HOME/.anyenv/bin:$PATH"
export PATH="/usr/local/opt/sbt@0.13/bin:$PATH"
export PYENV_ROOT="$HOME/.anyenv/envs/pyenv"
export PHPENV_ROOT="$HOME/.anyenv/envs/phpenv"
export GTAGSLABEL=pygments
export TERM=xterm-256color
if [ "$TMUX" != "" ]; then
  export TERM="screen-256color"
fi
export EDITOR="nvim"
export SHELL=/bin/zsh

pip3_upgrade () {
  pip3 install --upgrade pip && pip3 list --outdated --format columns | awk 'NR>2{print $1}' | xargs pip3 install --upgrade
}

pip2_upgrade () {
  pip2 install --upgrade pip && pip2 list --outdated --format columns | awk 'NR>2{print $1}' | xargs pip2 install --upgrade
}

pipenv_dev () {
  pipenv install --dev neovim ipython flake8 autopep8 pep8 jedi pylint pyflakes isort
}

py_dev () {
  pip3 install pipenv neovim ipython numpy scipy flake8 autopep8 pep8 jedi jupyter pylint pyflakes Pygments isort jupyterthemes jupyter_contrib_nbextensions
  pip2 install neovim
  ## setup jupyter extension dir
  jupyter contrib nbextension install --user
  if [ ! -e "$(jupyter --data-dir)/nbextensions" ]; then
    mkdir -p "$(jupyter --data-dir)/nbextensions"
  fi

  cd "$(jupyter --data-dir)/nbextensions" || exit
  ## jupter vim binding
  if [ ! -e "$(jupyter --data-dir)/nbextensions/vim_binding" ]; then
    git clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding
    jupyter nbextension enable vim_binding/vim_binding
  fi
  ## jupyter autopep8
  jupyter nbextension install https://github.com/kenkoooo/jupyter-autopep8/archive/master.zip --user
  jupyter nbextension enable jupyter-autopep8-master/jupyter-autopep8
  ## change jupyter theme
  jt -t oceans16 -vim
}

php_dev () {
  if ! composer global info | grep -sq laravel/installer; then
    composer global require "laravel/installer"
  fi

  if ! composer global info | grep -sq squizlabs/php_codesniffer; then
    composer global require "squizlabs/php_codesniffer=*"
  fi

  if ! composer global info | grep -sq friendsofphp/php-cs-fixer; then
    composer global require "friendsofphp/php-cs-fixer"
  fi

  if ! composer info | grep -sq felixfbecker/language-server; then
    composer config minimum-stability dev
    composer require --dev felixfbecker/language-server
    composer run-script --working-dir="./vendor/felixfbecker/language-server" parse-stubs
  fi

  if ! composer info | grep -sq phpstan/phpstan; then
    composer require --dev phpstan/phpstan
  fi

  if ! composer info | grep -sq phpunit/phpunit; then
    composer require --dev phpunit/phpunit
  fi
}

go_dev () {
  go get -u github.com/constabulary/gb/...
  go get -u golang.org/x/lint/golint
  go get -u golang.org/x/tools/cmd/goimports
}

node_dev () {
  npm install --save-dev javascript-typescript-langserver vscode-json-languageservice ts-node write-good mdl typescript typescript-formatter tslint eslint fixjson
  npm i -g npm-check-updates tern neovim npm yarn types-installer
}

ts_dev () {
  yarn add --dev typescript tslint tslint-config-airbnb mocha assert fixjson \
    eslint eslint-config-airbnb eslint-config-google eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react \
    javascript-typescript-langserver vscode-json-languageservice @types/node
  wget https://gist.githubusercontent.com/naronA/04cdf6f4926d34cb9923950a900f23e9/raw/8670668a639c368e8eba0a013b52d54f1e176440/tslint.json
  wget https://gist.githubusercontent.com/naronA/7417aa87863a4d424304273e4f574dab/raw/4029316ac7f055628ddc39290855219c5d4e1526/tsconfig.json
  wget https://gist.githubusercontent.com/naronA/2549a48dbdf3eaa0c31ce6ec4fc36b99/raw/09e095a469bcd572dfe5ebf7d31e2b262efa2500/.eslintrc.json
  mkdir .vscode && cd .vscode || exit
  wget https://gist.githubusercontent.com/naronA/4bf7e88eb2ac42fd71119632186f8180/raw/092317eb8fe353d16b2a5f4128a622c8476df9e2/tasks.json
  cd - || exit
}

docker_rmi_none () {
  docker images | grep \<none\> | awk "{print $3}" | xargs docker rmi
}

alias build-neovim='git pull && make clean && make CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX=$HOME/neovim" CMAKE_BUILD_TYPE=Release && make install'
alias neovim='~/neovim/bin/nvim'
alias tmux-reload='tmux source-file ~/.tmux.conf'
alias avenv='source ./env/bin/activate'
alias dvenv='deactivate'

alias docker-rm-exited='docker -aq | xargs docker rm'

if [ "$(uname)" = "Darwin" ]; then
  # Mac OSX
  # export PKG_CONFIG_PATH=/usr/local/Cellar/libffi/3.0.13/lib/pkgconfig
  # export PATH="/usr/local/wine/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin"
  export PATH="/usr/local/sbin:$PATH"
  # alias brew="PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin brew"
elif uname -a | grep -sq "Ubuntu"; then
  # Ubuntu
  #export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"
  export VTE_VERSION="100" 
  export PATH=$HOME/bin:$PATH
elif uname -a | grep -sq "Microsoft"; then
  # Windows Subsystem for Linux
  LS_COLORS=$LS_COLORS:'di=0;36:ow=0;36' ; export LS_COLORS
  zstyle ':completion:*' list-colors 'di=36' 'ow=36'
  export PATH=$HOME/bin:$PATH

elif uname -a | grep -sq "Linux"; then
  export PATH=$HOME/bin:$PATH
fi

if which anyenv > /dev/null; then
  eval "$(anyenv init -)"
fi


screenfetch
