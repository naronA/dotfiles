#!/bin/zsh
# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh
# export DEFAULT_USER="tMinamiii"
set bell-style none
skip_global_compinit=1
setopt no_beep
ZSH_THEME=""

plugins=(
  docker
  docker-compose
  git
  ripgrep
  tig
  tmux
)

. "$HOME/.oh-my-zsh/oh-my-zsh.sh"

# User configuration
export MANPATH="/usr/local/man:$MANPATH"

export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export ARCHFLAGS="-arch x86_64"
export UPDATE_ZSH_DAYS=7

export EDITOR="nvim"
export SHELL=/bin/zsh
export PYENV_ROOT="$HOME/.anyenv/envs/pyenv"
export PHPENV_ROOT="$HOME/.anyenv/envs/phpenv"
export GTAGSLABEL=pygments
export GOPATH="$HOME/go/1.13.4"
export GOBIN="$HOME/go/1.13.4/bin"
export GO111MODULE=on
export TERM=xterm-256color
export PIPENV_VENV_IN_PROJECT=true
export FZF_DEFAULT_OPTS='--height 40% --border'
export LSCOLORS=gxfxxxxxcxxxxxxxxxgxgx
export LS_COLORS='di=01;36:ln=01;35:ex=01;32'
export GOOGLE_APPLICATION_CREDENTIALS="$HOME/.gcp.json"

export ENHANCD_COMMAND=cdd
zstyle ':completion:*' list-colors 'di=36' 'ln=35' 'ex=32'

[ "$TMUX" != "" ] && export TERM="screen-256color"

if uname -a | grep -sq "Ubuntu"; then
  # LD_LIBRARY_PATH=/usr/local/cuda-10.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
  # export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
  # PATH=/usr/local/cuda-10.0/bin${PATH:+:${PATH}}
  export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
  PATH="$JAVA_HOME/bin:$PATH"
elif [ "$(uname)" = "Darwin" ]; then
    # Mac OSX
    test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
elif uname -a | grep -sq "microsoft"; then
    PATH="/mnt/c/Windows/System32:$PATH"
fi

export PATH="$HOME/.anyenv/bin:$HOME/.local/bin:$HOME/.cargo/bin:$HOME/bin:$GOBIN:$PATH"

alias build-vim='make clean && make distclean  && ./configure  --prefix=/usr/local/ --with-features=huge --enable-multibyte --enable-gpm --enable-cscope --enable-perlinterp --enable-python3interp --with-python3-command=$(echo $HOME)/.anyenv/envs/pyenv/shims/python --enable-rubyinterp --enable-luainterp --enable-acl --enable-fontset --enable-xim --enable-terminal --enable-fail-if-missing --with-luajit --with-x && make && sudo make install'
alias build-nvim='sudo rm -rf .deps build && sudo make clean && sudo make CMAKE_BUILD_TYPE=Release && sudo make CMAKE_INSTALL_PREFIX=/usr/local install'
alias tmux-reload='tmux source-file ~/.tmux.conf'
alias php-parse-stubs='composer run-script --working-dir="./vendor/felixfbecker/language-server" parse-stubs'
alias glog='git log --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit --date=relative'
alias glogalga='log --graph --all --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit --date=relative'
alias dus='du --max-depth=1 -h | sort -nr'

# docker
alias docker-ps='docker ps -a'
alias docker-rm='docker stop $(docker ps -aq) && docker rm $(docker ps -aq)'
alias docker-prune='docker system prune --volumes'

# raspi
alias pi1='ssh ubuntu@172.16.27.10'
alias pi2='ssh ubuntu@172.16.27.11'
alias pi3='ssh ubuntu@172.16.27.12'

# ghq
alias github='gh-open $(repos)'

function nuxt_setup() {
  echo -n "ok?(y/N): "
  if read -q; then
    curl -L -O https://raw.githubusercontent.com/tMinamiii/ts-nuxt/master/package.json
    curl -L -O https://raw.githubusercontent.com/tMinamiii/ts-nuxt/master/.eslintrc.js
    curl -L -O https://raw.githubusercontent.com/tMinamiii/ts-nuxt/master/.eslintignore.js
    curl -L -O https://raw.githubusercontent.com/tMinamiii/ts-nuxt/master/tsconfig.js
    curl -L -O https://raw.githubusercontent.com/tMinamiii/ts-nuxt/master/nuxt.config.ts
    curl -L -O https://raw.githubusercontent.com/tMinamiii/ts-nuxt/master/jest.config.js
    curl -L -O https://raw.githubusercontent.com/tMinamiii/ts-nuxt/master/index.d.ts
  else
    echo abort
  fi
}

function react_setup() {
  echo -n "ok?(y/N): "
  if read -q; then
    curl -L -O https://raw.githubusercontent.com/tMinamiii/ts-react/master/.eslintrc.js
    curl -L -O https://raw.githubusercontent.com/tMinamiii/ts-react/master/.stylelintrc.js
    curl -L -O https://raw.githubusercontent.com/tMinamiii/ts-react/master/package.json
  else
    echo abort
  fi
}

function python_setup () {
  echo -n "ok?(y/N): "
  if read -q; then
    if [ ! -e "/.vscode" ]; then
      mkdir .vscode
      curl -L -O https://raw.githubusercontent.com/tMinamiii/python-template/master/.vscode/settings.json -o .vscode/settings.json
    fi
    # curl -L -O https://raw.githubusercontent.com/tMinamiii/python-template/master/.env.workspace
    # curl -L -O https://raw.githubusercontent.com/tMinamiii/python-template/master/.envrc
    curl -L -O https://raw.githubusercontent.com/tMinamiii/python-template/master/.flake8
    curl -L -O https://raw.githubusercontent.com/tMinamiii/python-template/master/.gitignore
    curl -L -O https://raw.githubusercontent.com/tMinamiii/python-template/master/.isort.cfg
    curl -L -O https://raw.githubusercontent.com/tMinamiii/python-template/master/.mypy.ini
    curl -L -O https://raw.githubusercontent.com/tMinamiii/python-template/master/.pre-commit-config.yaml
    curl -L -O https://raw.githubusercontent.com/tMinamiii/python-template/master/requirements.txt
    curl -L -O https://raw.githubusercontent.com/tMinamiii/python-template/master/editorconfig
    curl -L -O https://raw.githubusercontent.com/tMinamiii/python-template/master/pyproject.toml
    python -m venv .venv
    poetry config --local virtualenvs.in-project true
    poetry add -D $(cat requirements.txt)
  else
    echo abort
  fi
}

function pip3_upgrade () {
  pip3 install --upgrade pip && pip3 list --outdated --format columns | awk 'NR>2{print $1}' | xargs pip3 install --upgrade
}

function pip2_upgrade () {
  pip2 install --upgrade pip && pip2 list --outdated --format columns | awk 'NR>2{print $1}' | xargs pip2 install --upgrade
}

function ghq-fzf() {
  local src=$(ghq list | fzf )
  if [ -n "$src" ]; then
    BUFFER="cd $(ghq root)/$src"
    zle accept-line
  fi
  zle -R -c
}
zle -N ghq-fzf
bindkey '^G' ghq-fzf

npm_freeze() {
  npm list -g --depth=0 | tail +2 | awk '{ print $2 }' | sed -e 's/\@[0-9].*$//g' | tr '\n' ' '
}

[ -f ~/.anyenv/bin/anyenv ] && eval "$(anyenv init - --no-rehash)"
[ -f "$(which hub)" ] && eval "$(hub alias -s)"
[ -f "$(which direnv)" ] && eval "$(direnv hook zsh)"
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing DHARMA Initiative Plugin Manager (zdharma/zinit)…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f" || \
        print -P "%F{160}▓▒░ The clone has failed.%f"
fi
source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
### End of Zinit installer's chunk

zinit ice pick"async.zsh" src"pure.zsh"
zinit light sindresorhus/pure
# zinit light denysdovhan/spaceship-prompt
zinit light zsh-users/zsh-autosuggestions
zinit light b4b4r07/enhancd
bindkey '^[' autosuggest-accept
